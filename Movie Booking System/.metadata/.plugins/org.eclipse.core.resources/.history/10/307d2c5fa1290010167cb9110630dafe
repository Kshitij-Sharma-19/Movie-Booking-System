package com.movie.moviecatalogservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/movies")
@RequiredArgsConstructor
@Tag(name = "Movie Management", description = "APIs for managing movies in the catalog")
public class MovieController {

    private final MovieService movieService;

    @GetMapping
    @Operation(summary = "Get all movies", description = "Retrieves a list of all movies.")
    @ApiResponse(responseCode = "200", description = "Successfully retrieved list")
    public ResponseEntity<List<MovieDto>> getAllMovies(
            @Parameter(description = "Filter movies by genre (optional)") @RequestParam(required = false) String genre) {
        if (genre != null && !genre.isEmpty()) {
            return ResponseEntity.ok(movieService.findMoviesByGenre(genre));
        }
        return ResponseEntity.ok(movieService.getAllMovies());
    }

    @GetMapping("/{id}")
    @Operation(summary = "Get movie by ID", description = "Retrieves a specific movie by its ID.")
    @ApiResponse(responseCode = "200", description = "Successfully retrieved movie")
    @ApiResponse(responseCode = "404", description = "Movie not found")
    public ResponseEntity<MovieDto> getMovieById(
            @Parameter(description = "ID of the movie to retrieve") @PathVariable Long id) {
        return ResponseEntity.ok(movieService.getMovieById(id));
    }

    @GetMapping("/title/{title}")
     @Operation(summary = "Get movie by Title", description = "Retrieves a specific movie by its title (case-insensitive).")
    @ApiResponse(responseCode = "200", description = "Successfully retrieved movie")
    @ApiResponse(responseCode = "404", description = "Movie not found")
    public ResponseEntity<MovieDto> getMovieByTitle(
            @Parameter(description = "Title of the movie to retrieve") @PathVariable String title) {
        return ResponseEntity.ok(movieService.getMovieByTitle(title));
    }


    @PostMapping
    @PreAuthorize("hasRole('ADMIN')") // Secure endpoint: Only ADMIN can add movies
    @Operation(summary = "Add a new movie", description = "Adds a new movie to the catalog. Requires ADMIN role.",
               security = @SecurityRequirement(name = "bearerAuth")) // Link to security scheme defined in OpenAPI config
    @ApiResponse(responseCode = "201", description = "Movie created successfully")
    @ApiResponse(responseCode = "400", description = "Invalid input or movie title already exists")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden (user does not have ADMIN role)")
    public ResponseEntity<MovieDto> addMovie(@Valid @RequestBody MovieDto movieDto) {
        MovieDto createdMovie = movieService.addMovie(movieDto);
        return new ResponseEntity<>(createdMovie, HttpStatus.CREATED);
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Update an existing movie", description = "Updates details of an existing movie by ID. Requires ADMIN role.",
               security = @SecurityRequirement(name = "bearerAuth"))
    @ApiResponse(responseCode = "200", description = "Movie updated successfully")
    @ApiResponse(responseCode = "400", description = "Invalid input or movie title conflict")
    @ApiResponse(responseCode = "404", description = "Movie not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden")
    public ResponseEntity<MovieDto> updateMovie(
            @Parameter(description = "ID of the movie to update") @PathVariable Long id,
            @Valid @RequestBody MovieDto movieDto) {
        return ResponseEntity.ok(movieService.updateMovie(id, movieDto));
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "Delete a movie", description = "Deletes a movie by ID. Requires ADMIN role.",
               security = @SecurityRequirement(name = "bearerAuth"))
    @ApiResponse(responseCode = "204", description = "Movie deleted successfully")
    @ApiResponse(responseCode = "404", description = "Movie not found")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden")
    @ResponseStatus(HttpStatus.NO_CONTENT) // Return 204 No Content on successful deletion
    public void deleteMovie(
            @Parameter(description = "ID of the movie to delete") @PathVariable Long id) {
        movieService.deleteMovie(id);
    }
}