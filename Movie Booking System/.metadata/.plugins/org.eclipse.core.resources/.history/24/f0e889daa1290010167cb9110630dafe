package com.movie.moviecatalogservice.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.movie.moviecatalogservice.dto.MovieDto;
import com.movie.moviecatalogservice.model.Movie;
import com.movie.moviecatalogservice.repository.MovieRepository;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
@Transactional // Add transactional behavior to service methods
public class MovieService {

    private final MovieRepository movieRepository;
    // private final ModelMapper modelMapper; // Or use custom mapping logic

    // --- Mapping Logic (Example without ModelMapper) ---
    private MovieDto convertToDto(Movie movie) {
        return MovieDto.builder()
                .id(movie.getId())
                .title(movie.getTitle())
                .description(movie.getDescription())
                .genre(movie.getGenre())
                .durationMinutes(movie.getDurationMinutes())
                .releaseDate(movie.getReleaseDate())
                .director(movie.getDirector())
                .castMembers(movie.getCastMembers())
                .posterUrl(movie.getPosterUrl())
                .build();
    }

    private Movie convertToEntity(MovieDto movieDto) {
        return Movie.builder()
                // ID is usually not set when converting DTO to Entity for creation
                .title(movieDto.getTitle())
                .description(movieDto.getDescription())
                .genre(movieDto.getGenre())
                .durationMinutes(movieDto.getDurationMinutes())
                .releaseDate(movieDto.getReleaseDate())
                .director(movieDto.getDirector())
                .castMembers(movieDto.getCastMembers())
                .posterUrl(movieDto.getPosterUrl())
                .build();
    }
    // --- End Mapping Logic ---


    public List<MovieDto> getAllMovies() {
        log.info("Fetching all movies");
        return movieRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public MovieDto getMovieById(Long id) {
        log.info("Fetching movie by id: {}", id);
        Movie movie = movieRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", id));
        return convertToDto(movie);
    }

     public MovieDto getMovieByTitle(String title) {
        log.info("Fetching movie by title: {}", title);
        Movie movie = movieRepository.findByTitleIgnoreCase(title)
                .orElseThrow(() -> new ResourceNotFoundException("Movie", "title", title));
        return convertToDto(movie);
    }


    public MovieDto addMovie(MovieDto movieDto) {
        log.info("Adding new movie with title: {}", movieDto.getTitle());
        if (movieRepository.existsByTitleIgnoreCase(movieDto.getTitle())) {
             throw new IllegalArgumentException("Movie with title '" + movieDto.getTitle() + "' already exists.");
        }
        Movie movie = convertToEntity(movieDto);
        Movie savedMovie = movieRepository.save(movie);
        log.info("Movie added successfully with id: {}", savedMovie.getId());
        return convertToDto(savedMovie);
    }

    public MovieDto updateMovie(Long id, MovieDto movieDto) {
        log.info("Updating movie with id: {}", id);
        Movie existingMovie = movieRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", id));

        // Check for title conflict if title is being changed
        if (!existingMovie.getTitle().equalsIgnoreCase(movieDto.getTitle()) &&
            movieRepository.existsByTitleIgnoreCase(movieDto.getTitle())) {
             throw new IllegalArgumentException("Another movie with title '" + movieDto.getTitle() + "' already exists.");
        }

        // Update fields from DTO
        existingMovie.setTitle(movieDto.getTitle());
        existingMovie.setDescription(movieDto.getDescription());
        existingMovie.setGenre(movieDto.getGenre());
        existingMovie.setDurationMinutes(movieDto.getDurationMinutes());
        existingMovie.setReleaseDate(movieDto.getReleaseDate());
        existingMovie.setDirector(movieDto.getDirector());
        existingMovie.setCastMembers(movieDto.getCastMembers());
        existingMovie.setPosterUrl(movieDto.getPosterUrl());

        Movie updatedMovie = movieRepository.save(existingMovie);
        log.info("Movie updated successfully for id: {}", id);
        return convertToDto(updatedMovie);
    }

    public void deleteMovie(Long id) {
        log.warn("Attempting to delete movie with id: {}", id); // Use WARN for deletion logs
        if (!movieRepository.existsById(id)) {
            throw new ResourceNotFoundException("Movie", "id", id);
        }
        movieRepository.deleteById(id);
        log.info("Movie deleted successfully with id: {}", id);
    }

    public List<MovieDto> findMoviesByGenre(String genre) {
        log.info("Finding movies by genre: {}", genre);
        return movieRepository.findByGenreContainingIgnoreCase(genre).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }
}