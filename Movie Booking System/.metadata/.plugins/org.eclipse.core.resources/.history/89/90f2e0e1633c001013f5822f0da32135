package com.movie.booking.service;

import feign.FeignException;
import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import jakarta.persistence.OptimisticLockException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.movie.booking.client.MovieCatalogClient;
import com.movie.booking.client.PaymentClient;
import com.movie.booking.dto.BookingRequestDto;
import com.movie.booking.dto.BookingResponseDto;
import com.movie.booking.dto.PaymentRequestDto;
import com.movie.booking.dto.PaymentResponseDto;
import com.movie.booking.dto.ShowtimeDto;
import com.movie.booking.exception.BookingException;
import com.movie.booking.exception.ResourceNotFoundException;
import com.movie.booking.model.Booking;
import com.movie.booking.model.BookingStatus;
import com.movie.booking.model.ShowtimeSeat;
import com.movie.booking.model.SeatStatus;
import com.movie.booking.repository.BookingRepository;
import com.movie.booking.repository.ShowtimeSeatRepository; // NEW IMPORT

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class BookingService {

    private final BookingRepository bookingRepository;
    private final ShowtimeSeatRepository showtimeSeatRepository; // NEW DEPENDENCY
    private final MovieCatalogClient movieCatalogClient;
    private final PaymentClient paymentClient;

    private static final int SEAT_LOCK_DURATION_MINUTES = 10;

    // --- Mapping Logic ---
    private BookingResponseDto convertToDto(Booking booking) {
        return BookingResponseDto.builder()
                .id(booking.getId())
                .userId(booking.getUserId())
                .showtimeId(booking.getShowtimeId())
                .movieId(booking.getMovieId())
                .theaterId(booking.getTheaterId())
                // Uses the getNumberOfSeats() method which derives from selectedSeats.size()
                .numberOfSeats(booking.getNumberOfSeats())
                .selectedSeats(booking.getSelectedSeats()) // ADDED to response
                .totalPrice(booking.getTotalPrice())
                .bookingTime(booking.getBookingTime())
                .status(booking.getStatus())
                .paymentTransactionId(booking.getPaymentTransactionId())
                .movieTitle(booking.getMovieTitle())
                .theaterName(booking.getTheaterName())
                .showtimeDateTime(booking.getShowtimeDateTime())
                .build();
    }
    // --- End Mapping Logic ---

    @Transactional // Make booking creation transactional
    public BookingResponseDto createBooking(BookingRequestDto request, String userId) {
        log.info("Attempting to create booking for user: {}, showtime: {}, seats: {}",
                 userId, request.getShowtimeId(), request.getSelectedSeats());

        // 1. Get Showtime Details
        ShowtimeDto showtimeDto = getShowtimeDetails(request.getShowtimeId());
        validateShowtimeForBooking(showtimeDto); // Basic validation like showtime not in past

        // 2. Attempt to lock selected seats
        List<ShowtimeSeat> lockedSeats = lockSeats(request.getShowtimeId(), request.getSelectedSeats(), userId);
        if (lockedSeats.size() != request.getSelectedSeats().size()) {
            // Not all seats could be locked, release any that were partially locked and throw
            releaseSeats(lockedSeats, "Partial lock failure during booking creation.");
            throw new BookingException("One or more selected seats are not available. Please try again.", null);
        }

        // 3. Create Initial Booking Record (Status: PENDING_PAYMENT)
        BigDecimal totalPrice = showtimeDto.getPrice().multiply(BigDecimal.valueOf(request.getSelectedSeats().size()));
        Booking booking = Booking.builder()
                .userId(userId)
                .showtimeId(request.getShowtimeId())
                .movieId(showtimeDto.getMovie().getId())
                .theaterId(showtimeDto.getTheater().getId())
                .selectedSeats(request.getSelectedSeats()) // Store selected seat identifiers
                .totalPrice(totalPrice)
                .bookingTime(LocalDateTime.now())
                .status(BookingStatus.PENDING_PAYMENT)
                .movieTitle(showtimeDto.getMovie().getTitle())
                .theaterName(showtimeDto.getTheater().getName())
                .showtimeDateTime(showtimeDto.getShowtime())
                .build();
        booking = bookingRepository.save(booking);
        log.info("Initial booking record created with id: {}, status: PENDING_PAYMENT", booking.getId());

        // Link seats to this booking and update their status to PENDING_PAYMENT
        updateSeatsForPendingPayment(lockedSeats, booking.getId(), userId);

        // 4. Process Payment
        PaymentResponseDto paymentResponse = processPayment(booking);

        // 5. Handle Payment Response
        if (paymentResponse.getStatus() == PaymentResponseDto.PaymentStatus.SUCCEEDED) {
            log.info("Payment successful for booking id: {}. Transaction ID: {}", booking.getId(), paymentResponse.getTransactionId());
            confirmSeatsAsBooked(lockedSeats, booking.getId());
            booking.setStatus(BookingStatus.CONFIRMED);
            booking.setPaymentTransactionId(paymentResponse.getTransactionId());
            log.info("Booking confirmed for id: {}", booking.getId());
            // Note: Removed direct call to decreaseSeatsInCatalog.
            // Seat availability is now primarily managed by ShowtimeSeat table.
            // If movie-catalog needs an update, it should be an event-driven or async update.
        } else {
            log.warn("Payment failed for booking id: {}. Reason: {}", booking.getId(), paymentResponse.getMessage());
            releaseSeats(lockedSeats, "Payment failed."); // Release the seats
            booking.setStatus(BookingStatus.PAYMENT_FAILED);
        }

        Booking finalBooking = bookingRepository.save(booking);
        return convertToDto(finalBooking);
    }

    private List<ShowtimeSeat> lockSeats(Long showtimeId, List<String> seatIdentifiers, String userId) {
        List<ShowtimeSeat> successfullyLockedSeats = new ArrayList<>();
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);

        for (String seatId : seatIdentifiers) {
            try {
                ShowtimeSeat seat = showtimeSeatRepository.findByShowtimeIdAndSeatIdentifier(showtimeId, seatId)
                    .orElseThrow(() -> new BookingException("Seat " + seatId + " not found for showtime " + showtimeId, null));

                if (seat.getStatus() == SeatStatus.AVAILABLE) {
                    seat.setStatus(SeatStatus.SELECTED_TEMP); // Or directly PENDING_PAYMENT if combined
                    seat.setUserId(userId);
                    seat.setLockedUntil(lockExpiryTime);
                    // Optimistic lock exception will be caught if 'version' mismatch
                    showtimeSeatRepository.save(seat);
                    successfullyLockedSeats.add(seat);
                } else {
                    // Seat not available (e.g. BOOKED, PENDING_PAYMENT by another user, or already SELECTED_TEMP and locked)
                    log.warn("Seat {} for showtime {} is not available. Current status: {}", seatId, showtimeId, seat.getStatus());
                    throw new BookingException("Seat " + seatId + " is not available.", null);
                }
            } catch (OptimisticLockException ole) {
                log.warn("Optimistic lock failed for seat {} on showtime {}. Seat was modified concurrently.", seatId, showtimeId, ole);
                // Release already locked seats in this transaction and rethrow or handle
                releaseSeats(successfullyLockedSeats, "Concurrent modification during seat locking.");
                throw new BookingException("Failed to lock seat " + seatId + " due to concurrent update. Please try again.", null);
            } catch (BookingException be) { // Catch specific exception for unavailable seats
                releaseSeats(successfullyLockedSeats, "Seat " + seatId + " was unavailable.");
                throw be; // Re-throw to be caught by the main createBooking method
            }
        }
        log.info("Successfully locked {} seats for showtime {} by user {}", successfullyLockedSeats.size(), showtimeId, userId);
        return successfullyLockedSeats;
    }

    private void updateSeatsForPendingPayment(List<ShowtimeSeat> seats, Long bookingId, String userId) {
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);
        for (ShowtimeSeat seat : seats) {
            seat.setStatus(SeatStatus.PENDING_PAYMENT);
            seat.setBookingId(bookingId);
            seat.setUserId(userId); // Ensure userId is set
            seat.setLockedUntil(lockExpiryTime); // Refresh lock time
            showtimeSeatRepository.save(seat);
        }
        log.info("Updated {} seats to PENDING_PAYMENT for bookingId {}", seats.size(), bookingId);
    }

    private void confirmSeatsAsBooked(List<ShowtimeSeat> seats, Long bookingId) {
        for (ShowtimeSeat seat : seats) {
            seat.setStatus(SeatStatus.BOOKED);
            seat.setBookingId(bookingId); // Ensure bookingId is set
            seat.setLockedUntil(null); // Clear lock time as it's permanently booked
            showtimeSeatRepository.save(seat);
        }
        log.info("Confirmed {} seats as BOOKED for bookingId {}", seats.size(), bookingId);
    }

    private void releaseSeats(List<ShowtimeSeat> seatsToRelease, String reason) {
        if (seatsToRelease == null || seatsToRelease.isEmpty()) {
            return;
        }
        log.warn("Releasing {} seats. Reason: {}", seatsToRelease.size(), reason);
        for (ShowtimeSeat seat : seatsToRelease) {
            // Reload the seat to get the latest version to avoid issues if it was modified again
            Optional<ShowtimeSeat> currentSeatOpt = showtimeSeatRepository.findById(seat.getId());
            if (currentSeatOpt.isPresent()) {
                ShowtimeSeat currentSeat = currentSeatOpt.get();
                // Only release if it's still in a temporary or pending state associated with this flow
                if (currentSeat.getStatus() == SeatStatus.SELECTED_TEMP || currentSeat.getStatus() == SeatStatus.PENDING_PAYMENT) {
                    currentSeat.setStatus(SeatStatus.AVAILABLE);
                    currentSeat.setUserId(null);
                    currentSeat.setBookingId(null);
                    currentSeat.setLockedUntil(null);
                    showtimeSeatRepository.save(currentSeat);
                } else {
                    log.warn("Seat {} for showtime {} was not in expected state ({}/{}) for release. Current status: {}",
                             currentSeat.getSeatIdentifier(), currentSeat.getShowtimeId(),
                             SeatStatus.SELECTED_TEMP, SeatStatus.PENDING_PAYMENT, currentSeat.getStatus());
                }
            }
        }
    }


    private ShowtimeDto getShowtimeDetails(Long showtimeId) {
        // ... (existing implementation - unchanged)
        log.debug("Fetching showtime details for id: {}", showtimeId);
        try {
            ResponseEntity<ShowtimeDto> response = movieCatalogClient.getShowtimeById(showtimeId);
            if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                log.error("Failed to fetch showtime details for id: {}. Status: {}", showtimeId, response.getStatusCode());
                throw new BookingException("Could not retrieve showtime details.", null);
            }
            ShowtimeDto dto = response.getBody();
            if (dto.getMovie() == null || dto.getTheater() == null) {
                 log.error("Incomplete showtime details received for id: {}", showtimeId);
                 throw new BookingException("Incomplete showtime details received from catalog service.", null);
            }
            log.debug("Successfully fetched showtime details for id: {}", showtimeId);
            return dto;
        } catch (MovieCatalogClient.ServiceUnavailableException | CallNotPermittedException e) {
             log.error("Error fetching showtime details for id: {} due to service availability/circuit breaker", showtimeId, e);
            throw new BookingException("Movie Catalog Service is currently unavailable. Please try again later.", null);
        } catch (FeignException e) {
             log.error("Feign error fetching showtime details for id: {}", showtimeId, e);
             if (e.status() == 404) {
                 throw new ResourceNotFoundException("Showtime", "id", showtimeId);
             }
             throw new BookingException("Error communicating with Movie Catalog Service.", null);
        } catch (Exception e) {
             log.error("Unexpected error fetching showtime details for id: {}", showtimeId, e);
             throw new BookingException("An unexpected error occurred while fetching showtime details.", null);
        }
    }

    // Renamed and simplified, as detailed seat availability is checked during lockSeats
    private void validateShowtimeForBooking(ShowtimeDto showtimeDto) {
         if (showtimeDto.getShowtime().isBefore(LocalDateTime.now())) {
            log.warn("Attempted booking for past showtime id: {}", showtimeDto.getId());
            throw new BookingException("Cannot book for a showtime that has already passed.", showtimeDto.getId());
        }
        // The old showtimeDto.getAvailableSeats() check is no longer the primary validation.
        // Actual availability of specific seats is checked in lockSeats().
    }

     private PaymentResponseDto processPayment(Booking booking) {
        // ... (existing implementation - unchanged)
        log.info("Initiating payment process for booking id: {}", booking.getId());
        PaymentRequestDto paymentRequest = PaymentRequestDto.builder()
                .bookingId(booking.getId())
                .userId(booking.getUserId())
                .amount(booking.getTotalPrice())
                .currency("INR")
                .paymentMethodNonce("fake-nonce")
                .build();
        try {
             ResponseEntity<PaymentResponseDto> response = paymentClient.processPayment(paymentRequest);
             if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                  log.error("Payment processing failed for booking id: {}. Status: {}", booking.getId(), response.getStatusCode());
                   return PaymentResponseDto.builder()
                            .bookingId(booking.getId())
                            .status(PaymentResponseDto.PaymentStatus.FAILED)
                            .message("Payment processing failed with status: " + response.getStatusCode())
                            .build();
             }
             log.info("Payment response received for booking id: {}. Status: {}", booking.getId(), response.getBody().getStatus());
             return response.getBody();
        } catch (MovieCatalogClient.ServiceUnavailableException | CallNotPermittedException e) {
             log.error("Payment processing failed for booking id: {} due to service availability/circuit breaker", booking.getId(), e);
              return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("Payment service unavailable. Please try again later.")
                        .build();
        } catch (FeignException e) {
            log.error("Feign error during payment processing for booking id: {}", booking.getId(), e);
             return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("Error communicating with Payment Service.")
                        .build();
        } catch (Exception e) {
             log.error("Unexpected error during payment processing for booking id: {}", booking.getId(), e);
              return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("An unexpected error occurred during payment.")
                        .build();
        }
    }

    // Removed decreaseSeatsInCatalog and increaseSeatsInCatalog methods
    // as seat state is now primarily managed by ShowtimeSeat entity within this service.

    // --- Read Operations ---
    public BookingResponseDto getBookingById(Long id, String userId) {
        log.info("Fetching booking by id: {} for user: {}", id, userId);
        Booking booking = bookingRepository.findByIdAndUserId(id, userId)
                .orElseThrow(() -> new ResourceNotFoundException("Booking", "id/userId", id + "/" + userId));
        return convertToDto(booking);
    }

    public List<BookingResponseDto> getBookingsByUserId(String userId) {
        log.info("Fetching all bookings for user: {}", userId);
        List<Booking> bookings = bookingRepository.findByUserIdOrderByBookingTimeDesc(userId);
        return bookings.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    // --- Cancellation Logic ---
    @Transactional
    public BookingResponseDto cancelBooking(Long bookingId, String userId) {
         log.warn("Attempting cancellation for booking id: {} by user: {}", bookingId, userId);
         Booking booking = bookingRepository.findByIdAndUserId(bookingId, userId)
                 .orElseThrow(() -> new ResourceNotFoundException("Booking", "id/userId", bookingId + "/" + userId));

        if (booking.getStatus() != BookingStatus.CONFIRMED) {
            throw new BookingException("Booking cannot be cancelled as it is not confirmed.", bookingId);
        }
        // Example: Allow cancellation up to 2 hours before showtime
        if (booking.getShowtimeDateTime() != null && booking.getShowtimeDateTime().isBefore(LocalDateTime.now().plusHours(2))) {
             throw new BookingException("Booking cannot be cancelled this close to the showtime.", bookingId);
        }

        // TODO: Process Refund via Payment Client
        log.info("Initiating refund for booking id: {}", bookingId);
        // PaymentResponseDto refundResponse = paymentClient.refundPayment(...); // Assuming a refund method
        boolean refundSuccessful = true; // Assume success for now for this example

        if (refundSuccessful) {
            // Release the seats associated with this booking
            List<ShowtimeSeat> seatsToRelease = showtimeSeatRepository.findAllByBookingId(bookingId);
            releaseSeats(seatsToRelease, "Booking cancellation.");

            booking.setStatus(BookingStatus.CANCELLED);
            log.info("Booking id: {} cancelled successfully.", bookingId);
            // Note: Removed direct call to increaseSeatsInCatalog.
        } else {
             log.error("Refund failed for booking id: {}", bookingId);
             throw new BookingException("Cancellation failed: Could not process refund.", bookingId);
        }

         Booking updatedBooking = bookingRepository.save(booking);
         return convertToDto(updatedBooking);
    }

    // Method to periodically clean up expired seat locks (e.g., run by a scheduler)
    @Transactional
    public void cleanupExpiredSeatLocks() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(SEAT_LOCK_DURATION_MINUTES + 1); // Add a small buffer

        // Clean up SELECTED_TEMP seats that were never converted to PENDING_PAYMENT
        List<ShowtimeSeat> expiredTempSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.SELECTED_TEMP, cutoffTime);
        if (!expiredTempSeats.isEmpty()) {
            log.info("Found {} expired SELECTED_TEMP seats to clean up.", expiredTempSeats.size());
            releaseSeats(expiredTempSeats, "Expired SELECTED_TEMP lock.");
        }

        // Clean up PENDING_PAYMENT seats where payment was never completed
        List<ShowtimeSeat> expiredPendingSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.PENDING_PAYMENT, cutoffTime);
        for (ShowtimeSeat seat : expiredPendingSeats) {
            log.warn("Seat {} for showtime {} was in PENDING_PAYMENT and expired. Releasing seat.", seat.getSeatIdentifier(), seat.getShowtimeId());
            // Also update the associated Booking to FAILED or CANCELLED
            if (seat.getBookingId() != null) {
                bookingRepository.findById(seat.getBookingId()).ifPresent(booking -> {
                    if (booking.getStatus() == BookingStatus.PENDING_PAYMENT) {
                        log.warn("Updating booking {} to PAYMENT_FAILED due to expired seat lock for seat {}", booking.getId(), seat.getSeatIdentifier());
                        booking.setStatus(BookingStatus.PAYMENT_FAILED); // Or a more specific EXPIRED status
                        bookingRepository.save(booking);
                    }
                });
            }
        }
        if(!expiredPendingSeats.isEmpty()){
             releaseSeats(expiredPendingSeats, "Expired PENDING_PAYMENT lock.");
        }
    }
}