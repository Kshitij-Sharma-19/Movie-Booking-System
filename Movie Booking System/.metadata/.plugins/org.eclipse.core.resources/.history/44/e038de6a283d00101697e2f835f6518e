package com.movie.booking.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(
    name = "showtime_seats",
    uniqueConstraints = {
        // Ensures that a seat identifier is unique for a given showtime
        @UniqueConstraint(columnNames = {"showtimeId", "seatIdentifier"})
    },
    indexes = {
        @Index(name = "idx_showtime_seat_showtime_id", columnList = "showtimeId"),
        @Index(name = "idx_showtime_seat_status", columnList = "status"),
        @Index(name = "idx_showtime_seat_booking_id", columnList = "bookingId"),
        @Index(name = "idx_showtime_seat_locked_until", columnList = "lockedUntil") // For querying expired locks
    }
)
public class ShowtimeSeat {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "Showtime ID cannot be null")
    @Column(nullable = false)
    private Long showtimeId; // References a showtime (likely managed externally or via another service)

    @NotBlank(message = "Seat identifier cannot be blank")
    @Column(nullable = false, length = 10) // Assuming seat identifiers like "A10", "R20C5"
    private String seatIdentifier;

    @NotNull(message = "Seat status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private SeatStatus status;

    @Column(nullable = true) // Null if not selected/booked by anyone
    private String userId;   // User who has selected/booked this seat

    @Column(nullable = true) // Null if not part of a confirmed booking yet
    private Long bookingId;  // Foreign key to the Booking entity

    @Column(nullable = true) // Time until which the seat is temporarily held
    private LocalDateTime lockedUntil;

    @Version // For optimistic locking to handle concurrent updates
    private Long version;
}