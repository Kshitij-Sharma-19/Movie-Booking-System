package com.movie.booking.repository;

package com.movie.booking.repository;

import com.movie.booking.model.SeatStatus;
import com.movie.booking.model.ShowtimeSeat;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import jakarta.persistence.LockModeType;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface ShowtimeSeatRepository extends JpaRepository<ShowtimeSeat, Long> {

    Optional<ShowtimeSeat> findByShowtimeIdAndSeatIdentifier(Long showtimeId, String seatIdentifier);

    List<ShowtimeSeat> findAllByShowtimeIdAndSeatIdentifierIn(Long showtimeId, List<String> seatIdentifiers);

    List<ShowtimeSeat> findAllByBookingId(Long bookingId);

    // For pessimistic locking example (can be used alternatively or in conjunction with optimistic)
    @Lock(LockModeType.PESSIMISTIC_WRITE)
    @Query("SELECT s FROM ShowtimeSeat s WHERE s.showtimeId = :showtimeId AND s.seatIdentifier = :seatIdentifier")
    Optional<ShowtimeSeat> findByShowtimeIdAndSeatIdentifierWithLock(@Param("showtimeId") Long showtimeId, @Param("seatIdentifier") String seatIdentifier);

    // For cleaning up expired temporary selections or pending payments
    List<ShowtimeSeat> findAllByStatusAndLockedUntilBefore(SeatStatus status, LocalDateTime cutoffTime);

    List<ShowtimeSeat> findAllByShowtimeIdAndStatus(Long showtimeId, SeatStatus status);
}
