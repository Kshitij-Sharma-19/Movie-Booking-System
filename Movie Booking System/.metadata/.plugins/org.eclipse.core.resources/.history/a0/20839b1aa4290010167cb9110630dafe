package com.movie.booking.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bookings")
public class Booking {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull(message = "User ID cannot be null")
    @Column(nullable = false, index = true) // Index for faster user lookup
    private String userId; // Store user ID from JWT (subject claim)

    @NotNull(message = "Showtime ID cannot be null")
    @Column(nullable = false)
    private Long showtimeId;

    @NotNull(message = "Movie ID cannot be null")
    @Column(nullable = false)
    private Long movieId; // Denormalized for easier querying/display

    @NotNull(message = "Theater ID cannot be null")
    @Column(nullable = false)
    private Long theaterId; // Denormalized

    @Positive(message = "Number of seats must be positive")
    @Column(nullable = false)
    private Integer numberOfSeats;

    @NotNull(message = "Total price cannot be null")
    @Column(nullable = false)
    private BigDecimal totalPrice;

    @NotNull(message = "Booking time cannot be null")
    @Column(nullable = false)
    private LocalDateTime bookingTime;

    @NotNull(message = "Booking status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private BookingStatus status;

    // Optional: Store payment transaction ID
    private String paymentTransactionId;

    // Optional: Denormalize movie title, theater name, showtime for easier display
    private String movieTitle;
    private String theaterName;
    private LocalDateTime showtimeDateTime;

}