package com.movie.moviecatalogservice.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.movie.moviecatalogservice.client.BookingServiceClient;
import com.movie.moviecatalogservice.dto.MovieDto;
import com.movie.moviecatalogservice.dto.SeatInitRequestDto;
import com.movie.moviecatalogservice.dto.ShowtimeDto;
import com.movie.moviecatalogservice.dto.TheaterDto;
import com.movie.moviecatalogservice.exception.ResourceNotFoundException;
import com.movie.moviecatalogservice.model.Movie;
import com.movie.moviecatalogservice.model.Showtime;
import com.movie.moviecatalogservice.model.Theater;
import com.movie.moviecatalogservice.repository.MovieRepository;
import com.movie.moviecatalogservice.repository.ShowtimeRepository;
import com.movie.moviecatalogservice.repository.TheaterRepository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;


@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class ShowtimeService {

    private final ShowtimeRepository showtimeRepository;
    private final MovieRepository movieRepository;
    private final TheaterRepository theaterRepository;
    private final BookingServiceClient bookingServiceClient;

    private static final int FIXED_SEATS_PER_ROW = 10; // As per your rule

    // --- Mapping Logic ---
    private ShowtimeDto convertToDto(Showtime showtime) {
        if (showtime == null) return null;

        Movie movie = showtime.getMovie(); // Assuming eager fetch or it's already loaded
        Theater theater = showtime.getTheater(); // Assuming eager fetch or it's already loaded

        MovieDto movieDto = (movie != null) ? MovieDto.builder()
                .id(movie.getId())
                .title(movie.getTitle())
                .genre(movie.getGenre())
                .description(movie.getDescription())
                .durationMinutes(movie.getDurationMinutes())
                .releaseDate(movie.getReleaseDate())
                .director(movie.getDirector())
                .castMembers(movie.getCastMembers())
                .posterUrl(movie.getPosterUrl())
                .build() : null;

        TheaterDto theaterDto = (theater != null) ? TheaterDto.builder()
                .id(theater.getId())
                .name(theater.getName())
                .city(theater.getCity())
                .address(theater.getAddress())
                .totalSeats(theater.getTotalSeats())
                .numberOfScreens(theater.getNumberOfScreens())
                .build() : null;

        return ShowtimeDto.builder()
                .id(showtime.getId())
                .movieId(showtime.getMovie() != null ? showtime.getMovie().getId() : null)
                .theaterId(showtime.getTheater() != null ? showtime.getTheater().getId() : null)
                .showtime(showtime.getShowtime())
                .price(showtime.getPrice())
                .availableSeats(showtime.getAvailableSeats()) // This is the initial capacity
                .screenNumber(showtime.getScreenNumber())     // Map new field
                .movie(movieDto)
                .theater(theaterDto)
                .build();
    }

    private Showtime convertToEntity(ShowtimeDto showtimeDto, Movie movie, Theater theater) {
        // Ensure availableSeats for the new Showtime entity is always sourced from the Theater's totalSeats
        if (theater.getTotalSeats() == null) {
            log.error("Theater with id {} has null totalSeats. Cannot create showtime.", theater.getId());
            throw new IllegalStateException("Theater must have totalSeats defined to create a showtime.");
        }
        // Validate screenNumber if provided against theater's numberOfScreens
        try {
            int screenNum = Integer.parseInt(showtimeDto.getScreenNumber().replaceAll("[^0-9]", "")); // Extract number
            if (theater.getNumberOfScreens() == null || screenNum <= 0 || screenNum > theater.getNumberOfScreens()) {
                throw new IllegalArgumentException("Invalid screen number '" + showtimeDto.getScreenNumber() +
                        "' for theater '" + theater.getName() + "' which has " + theater.getNumberOfScreens() + " screen(s).");
            }
        } catch (NumberFormatException e) {
             throw new IllegalArgumentException("Screen number '" + showtimeDto.getScreenNumber() + "' is not a valid format.");
        }


        return Showtime.builder()
                .movie(movie)
                .theater(theater)
                .showtime(showtimeDto.getShowtime())
                .price(showtimeDto.getPrice())
                .availableSeats(theater.getTotalSeats()) // ALWAYS use theater's total seats
                .screenNumber(showtimeDto.getScreenNumber()) // Map new field
                .build();
    }
    // --- End Mapping Logic ---

    public List<ShowtimeDto> getAllShowtimes() {
        log.info("Fetching all showtimes");
        return showtimeRepository.findAll().stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public ShowtimeDto getShowtimeById(Long id) {
        log.info("Fetching showtime by id: {}", id);
        Showtime showtime = showtimeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Showtime", "id", id));
        return convertToDto(showtime);
    }

     public List<ShowtimeDto> getShowtimesByMovieId(Long movieId) {
        log.info("Fetching showtimes for movie id: {}", movieId);
        if (!movieRepository.existsById(movieId)) {
             throw new ResourceNotFoundException("Movie", "id", movieId);
        }
        return showtimeRepository.findByMovieId(movieId).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public List<ShowtimeDto> getShowtimesByMovieAndCityForDate(Long movieId, String city, LocalDate date) {
        log.info("Fetching showtimes for movie id: {}, city: {}, date: {}", movieId, city, date);
        if (!movieRepository.existsById(movieId)) {
             throw new ResourceNotFoundException("Movie", "id", movieId);
        }
        LocalDateTime startOfDay = date.atStartOfDay();
        LocalDateTime endOfDay = date.plusDays(1).atStartOfDay();

        return showtimeRepository.findMovieShowtimesByCityAndTimeRange(movieId, city, startOfDay, endOfDay).stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    public ShowtimeDto addShowtime(ShowtimeDto showtimeDto) {
        log.info("Adding new showtime for movie id: {} at theater id: {} on screen: {}",
                 showtimeDto.getMovieId(), showtimeDto.getTheaterId(), showtimeDto.getScreenNumber());

        Movie movie = movieRepository.findById(showtimeDto.getMovieId())
                .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", showtimeDto.getMovieId()));
        Theater theater = theaterRepository.findById(showtimeDto.getTheaterId())
                .orElseThrow(() -> new ResourceNotFoundException("Theater", "id", showtimeDto.getTheaterId()));

        // The convertToEntity method now handles setting availableSeats from theater.getTotalSeats()
        // and validates screenNumber
        Showtime showtime = convertToEntity(showtimeDto, movie, theater);
        
        Showtime savedShowtime = null; // Initialize to null
        try {
            savedShowtime = showtimeRepository.save(showtime);
            // You could uncomment the flush if you suspect ID isn't available, but typically .save() handles it for generated IDs.
            // showtimeRepository.flush(); 
            log.info("Showtime entity after save attempt, ID: {}", (savedShowtime != null ? savedShowtime.getId() : "null"));
        } catch (Exception e) {
            log.error("CRITICAL ERROR: Exception during showtimeRepository.save() for movie id: {}, theater id: {}. Exception class: {}, Message: {}",
                      showtimeDto.getMovieId(), showtimeDto.getTheaterId(), e.getClass().getName(), e.getMessage(), e); // Log the full exception
            // Re-throw or handle as appropriate for your application
            // For now, re-throwing as a runtime exception to ensure it's visible
            throw new RuntimeException("Failed to save showtime due to: " + e.getMessage(), e);
        }

        // Ensure savedShowtime is not null and has an ID before proceeding
        if (savedShowtime == null || savedShowtime.getId() == null) {
            log.error("CRITICAL ERROR: savedShowtime or its ID is null after save operation. Showtime ID: {}, Movie ID: {}, Theater ID: {}. Cannot proceed with Feign call.",
                      (savedShowtime != null ? savedShowtime.getId() : "null"), // Log what we have
                      showtimeDto.getMovieId(), 
                      showtimeDto.getTheaterId());
            // Depending on your error handling strategy, you might throw an exception
            // or return an error DTO. For now, returning the DTO of whatever savedShowtime is.
            // If savedShowtime is null, convertToDto should handle it gracefully (e.g., return null).
            return convertToDto(savedShowtime); 
        }

        // If we've reached here, savedShowtime and savedShowtime.getId() should be valid.
        log.info("Showtime added successfully with id: {}", savedShowtime.getId());

        // --- Call Booking Service to Initialize Seats ---
        // The condition now primarily checks theater.getTotalSeats() as savedShowtime.getId() was validated above.
        if (theater.getTotalSeats() != null && theater.getTotalSeats() > 0) {
            Integer totalSeatsForRequest = theater.getTotalSeats();
            Integer seatsPerRowForRequest = FIXED_SEATS_PER_ROW; // As per your rule

            SeatInitRequestDto seatInitRequest = SeatInitRequestDto.builder()
                    .totalSeats(totalSeatsForRequest)
                    .seatsPerRow(seatsPerRowForRequest)
                    .build();
       
        } else {
            log.warn("Skipping Feign call to Booking Service for showtimeId: {} because theater.getTotalSeats() is not valid (Value: {}).",
                     savedShowtime.getId(), theater.getTotalSeats());
        }
        // --- End Call to Booking Service ---

        return convertToDto(savedShowtime);
    }

    public ShowtimeDto updateShowtime(Long id, ShowtimeDto showtimeDto) {
        log.info("Updating showtime with id: {}", id);
        Showtime existingShowtime = showtimeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Showtime", "id", id));

        Movie movie = existingShowtime.getMovie();
        if (showtimeDto.getMovieId() != null && !movie.getId().equals(showtimeDto.getMovieId())) {
             movie = movieRepository.findById(showtimeDto.getMovieId())
                .orElseThrow(() -> new ResourceNotFoundException("Movie", "id", showtimeDto.getMovieId()));
            existingShowtime.setMovie(movie);
        }

        Theater theater = existingShowtime.getTheater();
        boolean theaterChanged = false;
        if (showtimeDto.getTheaterId() != null && !theater.getId().equals(showtimeDto.getTheaterId())) {
             theater = theaterRepository.findById(showtimeDto.getTheaterId())
                .orElseThrow(() -> new ResourceNotFoundException("Theater", "id", showtimeDto.getTheaterId()));
            existingShowtime.setTheater(theater);
            theaterChanged = true; // Theater changed, so availableSeats must be updated
        }

        // If theater changed or if availableSeats is explicitly in DTO (though it shouldn't drive logic),
        // re-set availableSeats from the (potentially new) theater's total capacity.
        if (theaterChanged) {
            if (theater.getTotalSeats() == null) {
                 log.error("Updated theater with id {} has null totalSeats. Cannot update showtime.", theater.getId());
                 throw new IllegalStateException("Theater must have totalSeats defined.");
            }
            existingShowtime.setAvailableSeats(theater.getTotalSeats());
            log.info("Theater changed for showtime {}. Resetting availableSeats to new theater's capacity: {}", id, theater.getTotalSeats());
        }
        // Note: availableSeats from DTO is generally ignored for entity update, as it's derived.

        // Validate and update screenNumber
        if (showtimeDto.getScreenNumber() != null && !showtimeDto.getScreenNumber().equals(existingShowtime.getScreenNumber())) {
            try {
                int screenNum = Integer.parseInt(showtimeDto.getScreenNumber().replaceAll("[^0-9]", ""));
                if (theater.getNumberOfScreens() == null || screenNum <= 0 || screenNum > theater.getNumberOfScreens()) {
                    throw new IllegalArgumentException("Invalid screen number '" + showtimeDto.getScreenNumber() +
                            "' for theater '" + theater.getName() + "' which has " + theater.getNumberOfScreens() + " screen(s).");
                }
                existingShowtime.setScreenNumber(showtimeDto.getScreenNumber());
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("Screen number '" + showtimeDto.getScreenNumber() + "' is not a valid format.");
            }
        }


        existingShowtime.setShowtime(showtimeDto.getShowtime());
        existingShowtime.setPrice(showtimeDto.getPrice());

        Showtime updatedShowtime = showtimeRepository.save(existingShowtime);
        log.info("Showtime updated successfully for id: {}", id);
        // Consider if seat re-initialization is needed if theater or its capacity changes significantly.
        // Current logic only initializes on creation.

        return convertToDto(updatedShowtime);
    }

    public void deleteShowtime(Long id) {
        log.warn("Attempting to delete showtime with id: {}", id);
        Showtime showtime = showtimeRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Showtime", "id", id));
        // TODO: Implement pre-delete checks with BookingService
        // 1. Check for active bookings.
        // 2. Trigger seat deletion in BookingService for this showtimeId.
        //    This might involve a new Feign client call to a booking-service endpoint like:
        //    DELETE /api/v1/admin/showtimes/{showtimeId}/seats
        log.info("Deleting showtime {} for movie '{}' at theater '{}', screen {}",
                 id, showtime.getMovie().getTitle(), showtime.getTheater().getName(), showtime.getScreenNumber());
        showtimeRepository.deleteById(id);
        log.info("Showtime deleted successfully with id: {}", id);
    }

    @Deprecated
    public void decreaseAvailableSeats(Long showtimeId, int seatsToDecrease) {
        // This method is conceptually flawed now that booking-service owns seat state.
        log.warn("DEPRECATED: decreaseAvailableSeats called. This does not reflect actual seat availability.");
    }

    @Deprecated
    public void increaseAvailableSeats(Long showtimeId, int seatsToIncrease) {
        // This method is conceptually flawed now that booking-service owns seat state.
        log.warn("DEPRECATED: increaseAvailableSeats called. This does not reflect actual seat availability.");
    }
}