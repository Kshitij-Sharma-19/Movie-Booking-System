package com.movie.payment.service;

import java.math.BigDecimal;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.movie.payment.dto.PaymentRequestDto;
import com.movie.payment.dto.PaymentResponseDto;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class StripePaymentService {

	@Value("${stripe.secret.key}")
	private String stripeSecretKey;
	
	@PostConstruct
	public void init() {
		Stripe.apiKey=stripeSecretKey;
	}
	
	public PaymentResponseDto processPayment(PaymentRequestDto request) {
		log.info("Processing Stripe payment for booking id: {}, amount: {} {}, paymentMethodId: {}",
				request.getBookingId(), request.getAmount(),request.getCurrency(), request.getStripePaymentMethodId());
		
		try {
			long amountInCents = request.getAmount().multiply(new BigDecimal(100)).longValueExact();
			
			PaymentIntentCreateParams params = 
					PaymentIntentCreateParams.builder()
					.setAmount(amountInCents)
					.setCurrency(request.getCurrency().toLowerCase())
					.setPaymentMethod(request.getStripePaymentMethodId())
					.setConfirmationMethod(PaymentIntentCreateParams.ConfirmationMethod.MANUAL)
					.setConfirm(true)
					.build();
			PaymentIntent paymentIntent = PaymentIntent.create(params);
			
			if("succeeded".equals(paymentIntent.getStatus())) {
				log.info("Stripe Payment SUCCEEDED for booking id: {}. PaymentIntent ID: {}",
						request.getBookingId(), paymentIntent.getId());
				
				return PaymentResponseDto.builder()
						.bookingId(request.getBookingId())
						.status(PaymentResponseDto.PaymentStatus.SUCCEEDED)
						.transactionId(paymentIntent.getId())
						.message("Payment processed successfully via Stripe.")
						.build();
			} else if("requires_action".equals(paymentIntent.getStatus()) || 
					"requires_confirmation".equals(paymentIntent.getStatus()) ||
					(paymentIntent.getNextAction() != null && "use_stripe_sdk".equals(paymentIntent.getNextAction().getType()))) {
				  // This case usually means 3D Secure or other authentication is required.
                // The client-side Stripe.js needs to handle this using paymentIntent.getClientSecret()
                // For a purely server-side flow without client-side confirmation handling after this point,
                // this might be treated as a pending or failed state depending on your UX.
                // However, the client_secret should have been used by client to get here.
                // If using confirm=true and manual confirmation, it's more direct.
                log.warn("Stripe Payment requires further action for booking id: {}. PaymentIntent ID: {}",
                         request.getBookingId(), paymentIntent.getId());
                return PaymentResponseDto.builder()
                        .bookingId(request.getBookingId())
                        .status(PaymentResponseDto.PaymentStatus.PENDING) // Or FAILED, if you don't handle client-side actions
                        .transactionId(paymentIntent.getId())
                        .message("Payment requires further action (e.g., 3D Secure). Client Secret: " + paymentIntent.getClientSecret())
                        .build();
            } else { // Other statuses like "requires_payment_method", "canceled"
                log.warn("Stripe Payment FAILED for booking id: {}. Status: {}, PaymentIntent ID: {}",
                         request.getBookingId(), paymentIntent.getStatus(), paymentIntent.getId());
                return PaymentResponseDto.builder()
                        .bookingId(request.getBookingId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .transactionId(paymentIntent.getId())
                        .message("Payment failed on Stripe. Status: " + paymentIntent.getStatus())
                        .build();
            }	
				
		} catch(StripeException e) {
			log.error("Stripe API erro for booking id: {}:{}", request.getBookingId(), e.getMessage(), e);
			return PaymentResponseDto.builder()
					.bookingId(request.getBookingId())
					.status(PaymentResponseDto.PaymentStatus.FAILED)
					.message("Stripe API error: "+ e.getMessage())
					.build();
		} catch(Exception e) {
			log.error("Unexpected error during payment processing for booking id: {}", request.getBookingId(), e);
			return PaymentResponseDto.builder()
					.bookingId(request.getBookingId())
					.status(PaymentResponseDto.PaymentStatus.FAILED)
					.message("Unexpected error during payment processing.")
					.build();
		}

	}
}
