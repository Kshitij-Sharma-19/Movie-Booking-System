package com.movie.booking.service;

import com.movie.booking.dto.SeatInitRequestDto;
import com.movie.booking.model.SeatStatus;
import com.movie.booking.model.ShowtimeSeat;
import com.movie.booking.repository.ShowtimeSeatRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class BookingServiceImpl extends BookingService {

    private final ShowtimeSeatRepository showtimeSeatRepository;
    private static final int DEFAULT_SEATS_PER_ROW = 10; // Or your desired default

    // ... other methods like createBooking, getBookingById etc. ...

    @Override
    @Transactional
    public String initializeSeatsForShowtime(Long showtimeId, SeatInitRequestDto requestDto) {
        log.info("Initializing seats for showtimeId: {} with DTO: {}", showtimeId, requestDto);

        if (showtimeId == null || requestDto == null || requestDto.getTotalSeats() == null || requestDto.getTotalSeats() <= 0) {
            String errorMsg = String.format("Invalid input for seat initialization. ShowtimeId: %s, DTO: %s", showtimeId, requestDto);
            log.warn(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }

        int totalSeats = requestDto.getTotalSeats();
        int seatsPerRow = (requestDto.getSeatsPerRow() != null && requestDto.getSeatsPerRow() > 0)
                           ? requestDto.getSeatsPerRow() : DEFAULT_SEATS_PER_ROW;

        log.debug("Attempting to delete existing seats for showtimeId: {}", showtimeId);
        long deletedCount = showtimeSeatRepository.deleteByShowtimeId(showtimeId);
        log.info("Deleted {} existing seat(s) for showtimeId {} before re-initialization.", deletedCount, showtimeId);
        // showtimeSeatRepository.flush(); // Usually not needed, but can be tried if desperate to force delete commit

        List<ShowtimeSeat> seatsToCreate = new ArrayList<>();
        char currentRowChar = 'A';
        int currentSeatInRow = 1;

        for (int i = 0; i < totalSeats; i++) {
            String seatIdentifier = String.format("%c%d", currentRowChar, currentSeatInRow);

            ShowtimeSeat seat = ShowtimeSeat.builder()
                    .showtimeId(showtimeId) // Ensure this is the correct showtimeId
                    .seatIdentifier(seatIdentifier)
                    .status(SeatStatus.AVAILABLE)
                    .version(0L)
                    .build();
            seatsToCreate.add(seat);

            currentSeatInRow++;
            if (currentSeatInRow > seatsPerRow) {
                currentSeatInRow = 1;
                currentRowChar++;
                if (currentRowChar > 'Z' && seatsPerRow <= 26) { // Basic check, improve if complex row naming needed
                    log.warn("Row character exceeded 'Z' for showtimeId {}. Seat identifiers might become non-standard (e.g., '[1'). Consider enhancing row naming logic.", showtimeId);
                    // This simple logic does NOT wrap back to 'A' automatically.
                    // If it did, that would be a source of duplicates.
                }
            }
        }

        log.info("Generated {} seats to create for showtimeId: {}", seatsToCreate.size(), showtimeId);

        // **CRITICAL DIAGNOSTIC STEP:** Check for duplicates within seatsToCreate
        Map<String, Long> identifierCounts = seatsToCreate.stream()
            .collect(Collectors.groupingBy(
                seat -> "SID:" + seat.getShowtimeId() + "-ID:" + seat.getSeatIdentifier(), // Create a unique key for grouping
                Collectors.counting()
            ));

        boolean duplicatesFoundInList = false;
        for (Map.Entry<String, Long> entry : identifierCounts.entrySet()) {
            if (entry.getValue() > 1) {
                log.error("CRITICAL: Duplicate seat generated in the 'seatsToCreate' list! Key: {}, Count: {}", entry.getKey(), entry.getValue());
                duplicatesFoundInList = true;
            }
        }

        if (duplicatesFoundInList) {
            // You might want to throw an exception here or handle it before calling saveAll
            // For now, just logging and proceeding to let the DB catch it, but this indicates a flaw in generation.
            log.error("Proceeding to saveAll despite duplicates found in the generation list for showtimeId: {}. Database constraint violation is expected.", showtimeId);
        }
        // End of diagnostic step

        if (!seatsToCreate.isEmpty()) {
            try {
                showtimeSeatRepository.saveAll(seatsToCreate); // This is line 115 in your previous stack trace
                log.info("Successfully initialized {} new seats for showtimeId: {}.", seatsToCreate.size(), showtimeId);
                return String.format("Successfully initialized %d seats for showtime %d.", seatsToCreate.size(), showtimeId);
            } catch (DataIntegrityViolationException e) {
                log.error("DataIntegrityViolationException during saveAll for showtimeId: {}. This likely means duplicates were in the seatsToCreate list or a race condition occurred if another transaction interfered.", showtimeId, e);
                throw e; // Re-throw to be caught by GlobalExceptionHandler
            }
        } else {
            log.warn("No seats were generated for showtimeId: {}. Total requested seats: {}", showtimeId, totalSeats);
            return String.format("No seats generated for showtime %d (totalSeats: %d).", showtimeId, totalSeats);
        }
    }

    // Implement other BookingService methods if this is BookingServiceImpl
    // For example:
    // @Override public BookingResponseDto createBooking(BookingRequestDto bookingRequestDto, String userId) { /* ... */ return null; }
    // @Override public BookingResponseDto getBookingById(Long id, String userId) { /* ... */ return null; }
    // @Override public List<BookingResponseDto> getBookingsByUserId(String userId) { /* ... */ return null; }
    // @Override public BookingResponseDto cancelBooking(Long id, String userId) { /* ... */ return null; }
    @Override
    public List<ShowtimeSeatResponseDto> getSeatsForShowtime(Long showtimeId) {
        log.warn("getSeatsForShowtime in BookingServiceImpl not fully implemented yet.");
        return new ArrayList<>(); // Placeholder
    }
}