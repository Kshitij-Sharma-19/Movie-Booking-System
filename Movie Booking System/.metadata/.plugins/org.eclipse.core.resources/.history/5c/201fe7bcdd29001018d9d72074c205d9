package com.movie.auth.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import com.movie.auth.dto.JwtAuthenticationResponse;
import com.movie.auth.dto.SignUpRequest;
import com.movie.auth.dto.UserSummaryDto;
import com.movie.auth.model.User;
import com.movie.auth.repository.UserRepository;
import com.movie.auth.service.AuthenticationService;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/admin") // Base path for admin endpoints
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Admin Management", description = "APIs for administrative tasks (Require ADMIN role)")
@PreAuthorize("hasRole('ADMIN')") // Secure all methods in this controller
@SecurityRequirement(name = "bearerAuth") // Indicate all endpoints need auth token
public class AdminController {

    private final AuthenticationService authenticationService;
    private final UserRepository userRepository; // Inject repository for listing/getting users

    @PostMapping("/users/admin") // Changed path slightly for clarity
    @Operation(summary = "[ADMIN] Register a new ADMIN user",
               description = "Creates a new user with ADMIN privileges. Requires the caller to have ADMIN role.")
    @ApiResponse(responseCode = "200", description = "Admin user registered successfully, JWT returned")
    @ApiResponse(responseCode = "400", description = "Invalid input or email already exists")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden - Caller does not have ADMIN role")
    public ResponseEntity<JwtAuthenticationResponse> signupAdmin(@Valid @RequestBody SignUpRequest request) {
        log.warn("[ADMIN ACTION] Request received to create ADMIN user: {}", request.getEmail());
        // @PreAuthorize handles the role check
        return ResponseEntity.ok(authenticationService.signupAdmin(request));
    }

    @GetMapping("/users")
    @Operation(summary = "[ADMIN] List all users",
               description = "Retrieves a summary list of all registered users. Requires ADMIN role.")
    @ApiResponse(responseCode = "200", description = "Successfully retrieved user list")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden - Caller does not have ADMIN role")
    public ResponseEntity<List<UserSummaryDto>> getAllUsers() {
        log.info("[ADMIN ACTION] Request received to list all users");
        List<UserSummaryDto> users = userRepository.findAll()
                .stream()
                .map(this::mapToUserSummaryDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(users);
    }

    @GetMapping("/users/by-email/{email}")
    @Operation(summary = "[ADMIN] Get user by email",
               description = "Retrieves summary details for a specific user by their email. Requires ADMIN role.")
    @ApiResponse(responseCode = "200", description = "Successfully retrieved user details")
    @ApiResponse(responseCode = "404", description = "User not found with the specified email")
    @ApiResponse(responseCode = "401", description = "Unauthorized")
    @ApiResponse(responseCode = "403", description = "Forbidden - Caller does not have ADMIN role")
    public ResponseEntity<UserSummaryDto> getUserByEmail(
            @Parameter(description = "Email address of the user to retrieve") @PathVariable String email) {
        log.info("[ADMIN ACTION] Request received to get user by email: {}", email);
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new ResourceNotFoundException("User", "email", email));
        return ResponseEntity.ok(mapToUserSummaryDto(user));
    }

    // --- Helper Methods ---

    private UserSummaryDto mapToUserSummaryDto(User user) {
        return UserSummaryDto.builder()
                .id(user.getId())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .email(user.getEmail())
                .role(user.getRole())
                .createdAt(user.getCreatedAt()) // Assuming User entity has createdAt
                .build();
    }

    // --- TODO: Add other admin endpoints as needed ---
    // - Delete user
    // - Update user role
    // - Disable/Enable user
}