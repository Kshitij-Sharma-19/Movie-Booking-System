package com.movie.booking.service;

import com.movie.booking.client.MovieCatalogClient;
import com.movie.booking.client.PaymentClient;
import com.movie.booking.dto.*;
import com.movie.booking.exception.BookingException;
import com.movie.booking.exception.ResourceNotFoundException;
import com.movie.booking.model.Booking;
import com.movie.booking.model.BookingStatus;
import com.movie.booking.model.SeatStatus;
import com.movie.booking.model.ShowtimeSeat;
import com.movie.booking.repository.BookingRepository;
import com.movie.booking.repository.ShowtimeSeatRepository;

import feign.FeignException;
import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import jakarta.persistence.OptimisticLockException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class BookingService {

    private final BookingRepository bookingRepository;
    private final ShowtimeSeatRepository showtimeSeatRepository;
    private final MovieCatalogClient movieCatalogClient;
    private final PaymentClient paymentClient;

    private static final int SEAT_LOCK_DURATION_MINUTES = 10;
    private static final int DEFAULT_SEATS_PER_ROW = 10;

    /**
     * Initializes seat records for a given showtime.
     * This method is designed to be idempotent by deleting existing seats first.
     *
     * @param showtimeId The ID of the showtime.
     * @param requestDto DTO containing totalSeats and seatsPerRow.
     * @return A message indicating the result of the operation.
     */
    @Transactional
    public String initializeSeatsForShowtime(Long showtimeId, SeatInitRequestDto requestDto) {
        log.info("Initializing seats for showtimeId: {} with DTO: {}",
                showtimeId, requestDto);

        if (showtimeId == null || requestDto == null || requestDto.getTotalSeats() == null || requestDto.getTotalSeats() <= 0) {
            String errorMsg = String.format("Invalid input for seat initialization. ShowtimeId: %s, DTO: %s",
                                            showtimeId, requestDto);
            log.warn(errorMsg);
            throw new IllegalArgumentException(errorMsg);
        }

        int totalSeats = requestDto.getTotalSeats();
        int seatsPerRow = (requestDto.getSeatsPerRow() != null && requestDto.getSeatsPerRow() > 0)
                            ? requestDto.getSeatsPerRow() : DEFAULT_SEATS_PER_ROW;

        log.debug("Attempting to delete existing seats for showtimeId: {}", showtimeId);
        long deletedCount = showtimeSeatRepository.deleteByShowtimeId(showtimeId);
        if (deletedCount > 0) {
            log.info("Deleted {} existing seat(s) for showtimeId {} before re-initialization.", deletedCount, showtimeId);
        }


        List<ShowtimeSeat> seatsToCreate = new ArrayList<>();
        char currentRowChar = 'A';
        int currentSeatInRow = 1;

        for (int i = 0; i < totalSeats; i++) {
            String seatIdentifier = String.format("%c%d", currentRowChar, currentSeatInRow);

            ShowtimeSeat seat = ShowtimeSeat.builder()
                    .showtimeId(showtimeId)
                    .seatIdentifier(seatIdentifier)
                    .status(SeatStatus.AVAILABLE)
                    .version(0L)
                    .build();
            seatsToCreate.add(seat);

            currentSeatInRow++;
            if (currentSeatInRow > seatsPerRow) {
                currentSeatInRow = 1;
                currentRowChar++;
                if (currentRowChar > 'Z' && seatsPerRow <= 26) {
                    log.warn("Row character exceeded 'Z' for showtimeId {}. Seat identifiers might become non-standard. Consider enhancing row naming logic.", showtimeId);
                }
            }
        }

        log.info("Generated {} seats to create for showtimeId: {}", seatsToCreate.size(), showtimeId);

        // CRITICAL DIAGNOSTIC STEP: Check for duplicates within seatsToCreate
        Map<String, String> uniqueSeatKeys = new java.util.HashMap<>(); // Using a Map to check for true duplicates based on combined key
        boolean duplicatesFoundInList = false;
        for(ShowtimeSeat seat : seatsToCreate) {
            String key = "SID:" + seat.getShowtimeId() + "-ID:" + seat.getSeatIdentifier();
            if (uniqueSeatKeys.containsKey(key)) {
                log.error("CRITICAL: Duplicate seat generated in the 'seatsToCreate' list! Key: {}", key);
                duplicatesFoundInList = true;
                // break; // Optional: break early if one duplicate is enough to know
            } else {
                uniqueSeatKeys.put(key, "present");
            }
        }
        // Alternative duplicate check using groupingBy (as previously discussed)
        // Map<String, Long> identifierCounts = seatsToCreate.stream()
        //    .collect(Collectors.groupingBy(
        //        seat -> "SID:" + seat.getShowtimeId() + "-ID:" + seat.getSeatIdentifier(),
        //        Collectors.counting()
        //    ));
        // for (Map.Entry<String, Long> entry : identifierCounts.entrySet()) {
        //     if (entry.getValue() > 1) {
        //         log.error("CRITICAL: Duplicate seat generated in the 'seatsToCreate' list! Key: {}, Count: {}", entry.getKey(), entry.getValue());
        //         duplicatesFoundInList = true;
        //     }
        // }


        if (duplicatesFoundInList) {
            log.error("Proceeding to saveAll despite duplicates found in the generation list for showtimeId: {}. Database constraint violation is expected.", showtimeId);
        }

        if (!seatsToCreate.isEmpty()) {
            try {
                showtimeSeatRepository.saveAll(seatsToCreate);
                log.info("Successfully initialized {} new seats for showtimeId: {}.", seatsToCreate.size(), showtimeId);
                return String.format("Successfully initialized %d seats for showtime %d.", seatsToCreate.size(), showtimeId);
            } catch (org.springframework.dao.DataIntegrityViolationException e) { // Catching Spring's specific exception
                log.error("DataIntegrityViolationException during saveAll for showtimeId: {}. This likely means duplicates were in the seatsToCreate list (check CRITICAL logs) or a race condition occurred if another transaction interfered.", showtimeId, e);
                throw e; // Re-throw to be caught by GlobalExceptionHandler or propagate
            }
        } else {
            log.warn("No seats were generated for showtimeId: {}. Total requested seats: {}", showtimeId, totalSeats);
            return String.format("No seats generated for showtime %d (totalSeats: %d).", showtimeId, totalSeats);
        }
    }

    /**
     * Retrieves the seat layout for a given showtime.
     *
     * @param showtimeId The ID of the showtime.
     * @return A list of DTOs representing each seat's status.
     */
    public List<ShowtimeSeatResponseDto> getSeatsForShowtime(Long showtimeId) {
        log.debug("Fetching seat layout for showtimeId: {}", showtimeId);

        List<ShowtimeSeat> seats = showtimeSeatRepository.findAllByShowtimeId(showtimeId);

        if (seats.isEmpty()) {
            log.warn("No seats found for showtimeId: {}. Attempting to validate showtime existence.", showtimeId);
            try {
                getShowtimeDetails(showtimeId);
                log.warn("Showtime {} is valid, but no seats are initialized.", showtimeId);
            } catch (ResourceNotFoundException e) {
                log.warn("Showtime {} not found in catalog. Cannot provide seat layout.", showtimeId);
                throw e;
            }
            return Collections.emptyList();
        }

        Comparator<ShowtimeSeat> seatComparator = Comparator
            .comparing((ShowtimeSeat seat) -> seat.getSeatIdentifier().substring(0, 1))
            .thenComparingInt(seat -> {
                try {
                    return Integer.parseInt(seat.getSeatIdentifier().substring(1));
                } catch (NumberFormatException e) {
                    log.warn("Could not parse seat number for identifier '{}'. Using 0 for sorting.", seat.getSeatIdentifier());
                    return 0;
                }
            });

        return seats.stream()
                .sorted(seatComparator)
                .map(seat -> ShowtimeSeatResponseDto.builder()
                        .id(seat.getId())
                        .seatIdentifier(seat.getSeatIdentifier())
                        .status(seat.getStatus())
                        .userId(seat.getUserId()) // Include userId if seat is temporarily selected/locked by a user
                        .bookingId(seat.getBookingId()) // Include bookingId if seat is part of a booking
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * Creates a new booking, including seat locking and payment processing.
     *
     * @param request The booking request DTO.
     * @param userId  The ID of the user making the booking.
     * @return A DTO representing the created booking.
     */
    @Transactional
    public BookingResponseDto createBooking(BookingRequestDto request, String userId) {
        log.info("Attempting to create booking for user: {}, showtime: {}, seats: {}",
                 userId, request.getShowtimeId(), request.getSelectedSeats());

        if (request.getSelectedSeats() == null || request.getSelectedSeats().isEmpty()) {
            throw new BookingException("No seats selected for booking.", request.getShowtimeId());
        }

        ShowtimeDto showtimeDto = getShowtimeDetails(request.getShowtimeId());
        validateShowtimeForBooking(showtimeDto);

        List<ShowtimeSeat> lockedSeats = new ArrayList<>(); // Initialize to prevent null issues in finally
        Booking booking = null;
        try {
            lockedSeats = lockSeats(request.getShowtimeId(), request.getSelectedSeats(), userId);

            BigDecimal totalPrice = showtimeDto.getPrice().multiply(BigDecimal.valueOf(lockedSeats.size()));
            booking = Booking.builder()
                    .userId(userId)
                    .showtimeId(request.getShowtimeId())
                    .movieId(showtimeDto.getMovie().getId())
                    .theaterId(showtimeDto.getTheater().getId())
                    .selectedSeats(request.getSelectedSeats().stream().sorted().collect(Collectors.toList())) // Store sorted
                    .numberOfSeats(lockedSeats.size())
                    .totalPrice(totalPrice)
                    .bookingTime(LocalDateTime.now())
                    .status(BookingStatus.PENDING_PAYMENT)
                    .movieTitle(showtimeDto.getMovie().getTitle())
                    .theaterName(showtimeDto.getTheater().getName())
                    .showtimeDateTime(showtimeDto.getShowtime())
                    .build();
            booking = bookingRepository.save(booking);
            log.info("Initial booking record created with id: {}, status: PENDING_PAYMENT", booking.getId());

            updateSeatsForPendingPayment(lockedSeats, booking.getId(), userId);

            PaymentResponseDto paymentResponse = processPayment(booking);

            if (paymentResponse.getStatus() == PaymentResponseDto.PaymentStatus.SUCCEEDED) {
                confirmSeatsAsBooked(lockedSeats, booking.getId(), userId); // Pass userId for audit on seat
                booking.setStatus(BookingStatus.CONFIRMED);
                booking.setPaymentTransactionId(paymentResponse.getTransactionId());
                log.info("Booking id: {} payment successful. Status: CONFIRMED. Transaction ID: {}", booking.getId(), paymentResponse.getTransactionId());
            } else {
                log.warn("Payment failed for booking id: {}. Reason: {}. Releasing seats.", booking.getId(), paymentResponse.getMessage());
                releaseSeats(lockedSeats, "Payment failed for bookingId: " + booking.getId());
                booking.setStatus(BookingStatus.PAYMENT_FAILED);
            }
        } catch (Exception e) {
            log.error("Exception during booking creation process for showtime {}. Releasing seats if locked.", request.getShowtimeId(), e);
            if (!lockedSeats.isEmpty()) {
                String releaseReason = "Exception during booking creation: " + e.getMessage();
                if (booking != null && booking.getId() != null) {
                     releaseReason += " (Booking ID: " + booking.getId() + ")";
                }
                releaseSeats(lockedSeats, releaseReason);
            }
            if (booking != null && booking.getId() != null && (booking.getStatus() == BookingStatus.PENDING_PAYMENT || booking.getStatus() == null) ) {
                booking.setStatus(BookingStatus.FAILED); // General FAILED state
            }
            if (e instanceof BookingException) throw (BookingException) e;
            if (e instanceof OptimisticLockException) throw new BookingException("One or more selected seats were modified by another transaction. Please retry.", request.getShowtimeId(), e);
            throw new BookingException("An error occurred during booking creation: " + e.getMessage(), request.getShowtimeId(), e);
        } finally {
            if (booking != null && booking.getId() != null) {
                booking = bookingRepository.save(booking); // Save final state of booking
            }
        }
        return convertToDto(booking);
    }

    private List<ShowtimeSeat> lockSeats(Long showtimeId, List<String> seatIdentifiers, String userId) {
        log.debug("Attempting to lock seats: {} for showtime: {} by user: {}", seatIdentifiers, showtimeId, userId);
        List<ShowtimeSeat> successfullyLockedSeats = new ArrayList<>();
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);

        List<ShowtimeSeat> seatsToLock = showtimeSeatRepository.findAllByShowtimeIdAndSeatIdentifierIn(showtimeId, seatIdentifiers);

        if(seatsToLock.size() != seatIdentifiers.size()){
            List<String> foundIdentifiers = seatsToLock.stream().map(ShowtimeSeat::getSeatIdentifier).collect(Collectors.toList());
            List<String> missingIdentifiers = seatIdentifiers.stream().filter(id -> !foundIdentifiers.contains(id)).collect(Collectors.toList());
            log.warn("Not all seats found for locking. Missing: {} for showtime {}", missingIdentifiers, showtimeId);
            throw new BookingException("One or more selected seats (" + String.join(", ", missingIdentifiers) + ") do not exist. Please refresh.", showtimeId);
        }

        for (ShowtimeSeat seat : seatsToLock) {
            if (seat.getStatus() == SeatStatus.AVAILABLE) {
                try {
                    seat.setStatus(SeatStatus.SELECTED_TEMP);
                    seat.setUserId(userId);
                    seat.setLockedUntil(lockExpiryTime);
                    // save is done in batch after loop for efficiency if OptimisticLockException is handled per seat
                    // For individual OLE handling, save must be inside the loop.
                    showtimeSeatRepository.saveAndFlush(seat); // Save and flush to immediately check optimistic lock
                    successfullyLockedSeats.add(seat);
                    log.info("Successfully locked seat: {} for showtime {} by user {}", seat.getSeatIdentifier(), showtimeId, userId);
                } catch (OptimisticLockException ole) {
                    log.warn("Optimistic lock failed for seat {} on showtime {}. Seat modified concurrently.", seat.getSeatIdentifier(), showtimeId, ole);
                    // Release already locked seats in this attempt before throwing
                    releaseSeats(successfullyLockedSeats, "Optimistic lock failure for seat " + seat.getSeatIdentifier());
                    throw new BookingException("Seat " + seat.getSeatIdentifier() + " was booked by another user. Please try again.", showtimeId);
                }
            } else {
                 // Release already locked seats in this attempt before throwing
                releaseSeats(successfullyLockedSeats, "Seat " + seat.getSeatIdentifier() + " not available");
                log.warn("Seat {} for showtime {} is not available for locking. Current status: {}", seat.getSeatIdentifier(), showtimeId, seat.getStatus());
                throw new BookingException("Seat " + seat.getSeatIdentifier() + " is no longer available. Status: " + seat.getStatus(), showtimeId);
            }
        }
        return successfullyLockedSeats;
    }

    private void updateSeatsForPendingPayment(List<ShowtimeSeat> seats, Long bookingId, String userId) {
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);
        for (ShowtimeSeat seatFromLockPhase : seats) {
            ShowtimeSeat freshSeat = showtimeSeatRepository.findById(seatFromLockPhase.getId())
                .orElseThrow(() -> new BookingException("Seat with id " + seatFromLockPhase.getId() + " not found during PENDING_PAYMENT update for booking " + bookingId, bookingId));

            if (freshSeat.getStatus() != SeatStatus.SELECTED_TEMP || !userId.equals(freshSeat.getUserId())) {
                log.error("Seat {} for showtime {} (booking {}) was not in expected state (SELECTED_TEMP by user {}) for PENDING_PAYMENT update. Current status: {}, current user: {}",
                           freshSeat.getSeatIdentifier(), freshSeat.getShowtimeId(), bookingId, userId, freshSeat.getStatus(), freshSeat.getUserId());
                throw new BookingException("Seat " + freshSeat.getSeatIdentifier() + " state changed unexpectedly. Please retry booking.", bookingId);
            }
            freshSeat.setStatus(SeatStatus.PENDING_PAYMENT);
            freshSeat.setBookingId(bookingId);
            freshSeat.setLockedUntil(lockExpiryTime);
            showtimeSeatRepository.save(freshSeat);
        }
        log.info("Updated {} seats to PENDING_PAYMENT for bookingId {}", seats.size(), bookingId);
    }

    // Added userId to confirmSeatsAsBooked to potentially store who made the booking on the seat for audit
    private void confirmSeatsAsBooked(List<ShowtimeSeat> seats, Long bookingId, String bookingUserId) {
        for (ShowtimeSeat seatFromLockPhase : seats) {
            ShowtimeSeat freshSeat = showtimeSeatRepository.findById(seatFromLockPhase.getId())
                .orElseThrow(() -> new BookingException("Seat with id " + seatFromLockPhase.getId() + " not found during BOOKED confirmation for booking " + bookingId, bookingId));

            if (freshSeat.getStatus() != SeatStatus.PENDING_PAYMENT || !bookingId.equals(freshSeat.getBookingId())) {
                log.error("CRITICAL: Seat {} (booking {}) was not PENDING_PAYMENT for this booking during confirmation. Current status: {}, current bookingId: {}. Payment might have processed for an invalid seat state!",
                           freshSeat.getSeatIdentifier(), bookingId, freshSeat.getStatus(), freshSeat.getBookingId());
                throw new BookingException("Seat " + freshSeat.getSeatIdentifier() + " state was inconsistent. Contact support.", bookingId);
            }
            freshSeat.setStatus(SeatStatus.BOOKED);
            freshSeat.setLockedUntil(null);
            // Decide if userId on seat should be the booking user or cleared.
            // If cleared, the booking record is the source of truth for the user.
            // If kept, it's an audit of who last changed its state to BOOKED via this booking.
            freshSeat.setUserId(bookingUserId); // Or set to null if preferred after booking.
            showtimeSeatRepository.save(freshSeat);
        }
        log.info("Confirmed {} seats as BOOKED for bookingId {}", seats.size(), bookingId);
    }

    private void releaseSeats(List<ShowtimeSeat> seatsToRelease, String reason) {
        if (seatsToRelease == null || seatsToRelease.isEmpty()) {
            return;
        }
        log.warn("Attempting to release {} seats. Reason: {}", seatsToRelease.size(), reason);
        List<Long> seatIdsToRefetch = seatsToRelease.stream()
                                           .map(ShowtimeSeat::getId)
                                           .filter(java.util.Objects::nonNull)
                                           .collect(Collectors.toList());

        if (seatIdsToRefetch.isEmpty()) {
            log.warn("No persisted seats found in the list to release.");
            return;
        }

        List<ShowtimeSeat> currentSeats = showtimeSeatRepository.findAllById(seatIdsToRefetch);

        for (ShowtimeSeat currentSeat : currentSeats) {
            if (currentSeat.getStatus() == SeatStatus.SELECTED_TEMP || currentSeat.getStatus() == SeatStatus.PENDING_PAYMENT) {
                log.info("Releasing seat: id={}, identifier={}, showtimeId={}, oldStatus={}, userId={}, bookingId={}. Reason: {}",
                         currentSeat.getId(), currentSeat.getSeatIdentifier(), currentSeat.getShowtimeId(),
                         currentSeat.getStatus(), currentSeat.getUserId(), currentSeat.getBookingId(), reason);
                currentSeat.setStatus(SeatStatus.AVAILABLE);
                currentSeat.setUserId(null);
                currentSeat.setBookingId(null);
                currentSeat.setLockedUntil(null);
                showtimeSeatRepository.save(currentSeat);
            } else {
                log.warn("Seat id={}, identifier={}, showtimeId={} was not in an expected state ({}/{}) for release. Current status: {}. Not releasing.",
                         currentSeat.getId(), currentSeat.getSeatIdentifier(), currentSeat.getShowtimeId(),
                         SeatStatus.SELECTED_TEMP, SeatStatus.PENDING_PAYMENT, currentSeat.getStatus());
            }
        }
    }

    private ShowtimeDto getShowtimeDetails(Long showtimeId) {
        log.debug("Fetching showtime details for id: {}", showtimeId);
        try {
            ResponseEntity<ShowtimeDto> response = movieCatalogClient.getShowtimeById(showtimeId);
            if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                log.warn("Failed to fetch showtime details for id: {}. Status: {}", showtimeId, response.getStatusCode());
                if (response.getStatusCode().value() == 404) {
                    throw new ResourceNotFoundException("Showtime", "id", showtimeId);
                }
                throw new BookingException("Could not retrieve showtime details from catalog service.", showtimeId);
            }
            ShowtimeDto dto = response.getBody();
            if (dto.getMovie() == null || dto.getTheater() == null || dto.getPrice() == null) {
                 log.error("Incomplete showtime details received for id: {}. Movie, Theater, or Price might be null.", showtimeId);
                 throw new BookingException("Incomplete showtime details (Movie, Theater, or Price missing).", showtimeId);
            }
            log.debug("Successfully fetched showtime details for id: {}", showtimeId);
            return dto;
        } catch (MovieCatalogClient.ServiceUnavailableException | CallNotPermittedException e) {
            log.error("Movie Catalog Service unavailable or circuit breaker open for showtimeId {}: {}", showtimeId, e.getMessage());
            throw new BookingException("Movie Catalog Service is currently unavailable. Please try again later.", showtimeId, e);
        } catch (FeignException e) {
            log.error("Feign error fetching showtime details for id: {}. Status: {}", showtimeId, e.status(), e);
            if (e.status() == 404) {
                throw new ResourceNotFoundException("Showtime", "id", showtimeId);
            }
            throw new BookingException("Error communicating with Movie Catalog Service.", showtimeId, e);
        } catch (Exception e) {
            log.error("Unexpected error fetching showtime details for id: {}", showtimeId, e);
            throw new BookingException("An unexpected error occurred while fetching showtime details.", showtimeId, e);
        }
    }

    private void validateShowtimeForBooking(ShowtimeDto showtimeDto) {
         if (showtimeDto.getShowtime().isBefore(LocalDateTime.now())) {
            log.warn("Attempted booking for past showtime id: {}, time: {}", showtimeDto.getId(), showtimeDto.getShowtime());
            throw new BookingException("Cannot book for a showtime that has already passed.", showtimeDto.getId());
        }
    }

    private PaymentResponseDto processPayment(Booking booking) {
        log.info("Initiating payment process for booking id: {}", booking.getId());
        PaymentRequestDto paymentRequest = PaymentRequestDto.builder()
                .bookingId(booking.getId())
                .userId(booking.getUserId())
                .amount(booking.getTotalPrice())
                .currency("INR")
                .paymentMethodNonce("fake-card-nonce")
                .build();
        try {
             ResponseEntity<PaymentResponseDto> response = paymentClient.processPayment(paymentRequest);
             if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                  log.error("Payment processing failed for booking id: {}. Status: {}", booking.getId(), response.getStatusCode());
                   return PaymentResponseDto.builder()
                            .bookingId(booking.getId())
                            .status(PaymentResponseDto.PaymentStatus.FAILED)
                            .message("Payment processing failed with status: " + response.getStatusCode())
                            .build();
             }
             PaymentResponseDto paymentResponse = response.getBody();
             log.info("Payment response for booking id: {}. Status: {}, TransactionId: {}",
                      booking.getId(), paymentResponse.getStatus(), paymentResponse.getTransactionId());
             return paymentResponse;
        } catch (PaymentClient.PaymentFallback.ServiceUnavailableException | CallNotPermittedException e) {
            log.error("Payment Service unavailable or circuit breaker open for booking {}: {}", booking.getId(), e.getMessage());
            return PaymentResponseDto.builder()
                      .bookingId(booking.getId())
                      .status(PaymentResponseDto.PaymentStatus.FAILED)
                      .message("Payment service is currently unavailable. Please try again later.")
                      .build();
        } catch (FeignException e) {
            log.error("Feign error during payment processing for booking id: {}. Status: {}", booking.getId(), e.status(), e);
            return PaymentResponseDto.builder()
                       .bookingId(booking.getId())
                       .status(PaymentResponseDto.PaymentStatus.FAILED)
                       .message("Error communicating with Payment Service.")
                       .build();
        } catch (Exception e) {
             log.error("Unexpected error during payment processing for booking id: {}", booking.getId(), e);
             return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("An unexpected error occurred during payment.")
                        .build();
        }
    }

    public BookingResponseDto getBookingById(Long id, String userId) {
        log.info("Fetching booking by id: {} for user: {}", id, userId);
        Booking booking = bookingRepository.findByIdAndUserId(id, userId)
                .orElseThrow(() -> new ResourceNotFoundException("Booking", "id " + id + " for user " + userId, null));
        return convertToDto(booking);
    }

    public List<BookingResponseDto> getBookingsByUserId(String userId) {
        log.info("Fetching all bookings for user: {}", userId);
        List<Booking> bookings = bookingRepository.findByUserIdOrderByBookingTimeDesc(userId);
        return bookings.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Transactional
    public BookingResponseDto cancelBooking(Long bookingId, String userId) {
        log.warn("User {} attempting cancellation for booking id: {}", userId, bookingId);
        Booking booking = bookingRepository.findByIdAndUserId(bookingId, userId)
                 .orElseThrow(() -> new ResourceNotFoundException("Booking", "id " + bookingId + " for user " + userId, null));

        if (booking.getStatus() != BookingStatus.CONFIRMED) {
            log.warn("Booking {} cannot be cancelled. Status is: {}", bookingId, booking.getStatus());
            throw new BookingException("Booking cannot be cancelled as it is not in CONFIRMED state.", bookingId);
        }
        if (booking.getShowtimeDateTime() != null && booking.getShowtimeDateTime().isBefore(LocalDateTime.now().plusHours(2))) {
            log.warn("Booking {} cancellation rejected: Too close to showtime ({}).", bookingId, booking.getShowtimeDateTime());
            throw new BookingException("Booking cannot be cancelled this close to the showtime (less than 2 hours).", bookingId);
        }

        log.info("Initiating refund for booking id: {}", bookingId);
        boolean refundSuccessful = simulateRefund(booking);

        if (refundSuccessful) {
            List<ShowtimeSeat> seatsToRelease = showtimeSeatRepository.findAllByBookingId(bookingId);
            releaseSeats(seatsToRelease, "Booking cancellation for bookingId: " + bookingId);
            booking.setStatus(BookingStatus.CANCELLED);
            log.info("Booking id: {} cancelled successfully by user {}.", bookingId, userId);
        } else {
            log.error("Refund failed for booking id: {}. Booking not cancelled.", bookingId);
            throw new BookingException("Cancellation failed: Could not process refund at this time.", bookingId);
        }

        Booking updatedBooking = bookingRepository.save(booking);
        return convertToDto(updatedBooking);
    }

    private boolean simulateRefund(Booking booking) {
        log.info("Simulating refund for booking id: {}, amount: {}", booking.getId(), booking.getTotalPrice());
        return true;
    }

    @Transactional
    public void cleanupExpiredSeatLocks() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(SEAT_LOCK_DURATION_MINUTES + 2);
        log.debug("Running cleanup for seat locks expired before: {}", cutoffTime);

        List<ShowtimeSeat> expiredTempSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.SELECTED_TEMP, cutoffTime);
        if (!expiredTempSeats.isEmpty()) {
            log.info("Found {} expired SELECTED_TEMP seats to clean up.", expiredTempSeats.size());
            releaseSeats(expiredTempSeats, "Expired SELECTED_TEMP lock cleanup job.");
        }

        List<ShowtimeSeat> expiredPendingSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.PENDING_PAYMENT, cutoffTime);
        if (!expiredPendingSeats.isEmpty()) {
            log.info("Found {} expired PENDING_PAYMENT seats to clean up.", expiredPendingSeats.size());
            List<Long> bookingIdsToUpdate = expiredPendingSeats.stream()
                                                .map(ShowtimeSeat::getBookingId)
                                                .filter(java.util.Objects::nonNull)
                                                .distinct()
                                                .collect(Collectors.toList());

            if(!bookingIdsToUpdate.isEmpty()){
                List<Booking> bookingsToUpdate = bookingRepository.findAllByIdInAndStatus(bookingIdsToUpdate, BookingStatus.PENDING_PAYMENT);
                bookingsToUpdate.forEach(booking -> {
                    log.warn("Updating booking {} to PAYMENT_FAILED due to expired seat lock.", booking.getId());
                    booking.setStatus(BookingStatus.PAYMENT_FAILED);
                });
                bookingRepository.saveAll(bookingsToUpdate);
            }
            releaseSeats(expiredPendingSeats, "Expired PENDING_PAYMENT lock cleanup job.");
        }
        log.debug("Seat lock cleanup job finished.");
    }

    private BookingResponseDto convertToDto(Booking booking) {
        if (booking == null) return null;
        return BookingResponseDto.builder()
                .id(booking.getId())
                .userId(booking.getUserId())
                .showtimeId(booking.getShowtimeId())
                .movieId(booking.getMovieId())
                .theaterId(booking.getTheaterId())
                .numberOfSeats(booking.getNumberOfSeats())
                .selectedSeats(booking.getSelectedSeats())
                .totalPrice(booking.getTotalPrice())
                .bookingTime(booking.getBookingTime())
                .status(booking.getStatus())
                .paymentTransactionId(booking.getPaymentTransactionId())
                .movieTitle(booking.getMovieTitle())
                .theaterName(booking.getTheaterName())
                .showtimeDateTime(booking.getShowtimeDateTime())
                .build();
    }
}