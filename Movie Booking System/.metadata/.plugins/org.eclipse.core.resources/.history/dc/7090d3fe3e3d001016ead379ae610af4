package com.movie.moviecatalogservice.config; // Correct package for movie-catalog-service

import feign.RequestInterceptor;
import feign.RequestTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.jwt.Jwt; // Ensure this import is present
import org.springframework.stereotype.Component;

@Component
public class UserFeignClientInterceptor implements RequestInterceptor {

    private static final Logger log = LoggerFactory.getLogger(UserFeignClientInterceptor.class);
    private static final String AUTHORIZATION_HEADER = "Authorization";
    private static final String BEARER_TOKEN_TYPE = "Bearer";

    @Override
    public void apply(RequestTemplate template) {
        // Log entry into the interceptor and the target URL
        log.debug("UserFeignClientInterceptor invoked for Feign request to URL: {}", template.url());

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication != null) {
            log.debug("Authentication object found in SecurityContextHolder. Type: {}, Name: {}, Authenticated: {}",
                    authentication.getClass().getName(), authentication.getName(), authentication.isAuthenticated());

            Object principal = authentication.getPrincipal();
            if (principal != null) {
                log.debug("Principal object found. Type: {}", principal.getClass().getName());
            } else {
                log.warn("Principal object is null, though Authentication object exists.");
            }

            if (principal instanceof Jwt) {
                Jwt jwt = (Jwt) principal;
                String tokenValue = jwt.getTokenValue();
                // Avoid logging the full token in production for security reasons,
                // but subject or claims can be useful for debugging.
                log.info("Adding Authorization header with Bearer token. User subject: {}, Target URL: {}", 
                         jwt.getSubject(), template.url());
                template.header(AUTHORIZATION_HEADER, String.format("%s %s", BEARER_TOKEN_TYPE, tokenValue));
                // You could log specific claims if needed for debugging, e.g.,
                // log.debug("JWT Claims for outgoing request: {}", jwt.getClaims());
            } else {
                log.warn("Current principal is not a JWT. Principal type: {}. No Authorization header added for Feign request to URL: {}",
                        (principal != null ? principal.getClass().getName() : "null"), template.url());
                // If you expect only JWTs, this could indicate a misconfiguration
                // or a call path that doesn't involve a JWT-authenticated user.
            }
        } else {
            log.warn("Authentication is null in SecurityContextHolder. No Authorization header added for Feign request to URL: {}", template.url());
            // This will happen if the Feign call is made from a non-secured context
            // or a context not populated by Spring Security from an incoming request.
        }
    }
}