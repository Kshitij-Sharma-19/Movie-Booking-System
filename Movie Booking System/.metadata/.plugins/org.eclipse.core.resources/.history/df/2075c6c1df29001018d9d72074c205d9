package com.movie.auth.service;


import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // Import Transactional

import com.movie.auth.dto.JwtAuthenticationResponse;
import com.movie.auth.dto.LoginRequest;
import com.movie.auth.dto.SignUpRequest;
import com.movie.auth.dto.UserInfoResponse;
import com.movie.auth.exception.UserAlreadyExistsException;
import com.movie.auth.model.Role;
import com.movie.auth.model.User;
import com.movie.auth.repository.UserRepository;

import jakarta.validation.Valid;

import java.util.stream.Collectors;


@Service
@RequiredArgsConstructor
public class AuthenticationService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;

    @Transactional // Add Transactional annotation
    public JwtAuthenticationResponse signup(SignUpRequest request) {
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new IllegalArgumentException("Email already in use.");
        }

        var user = User.builder()
                .firstName(request.getFirstName())
                .lastName(request.getLastName())
                .email(request.getEmail())
                .password(passwordEncoder.encode(request.getPassword()))
                // Default role to USER. Add logic for ADMIN role if needed.
                .role(Role.ROLE_USER)
                .build();

        user = userRepository.save(user); // Save the user

        var jwt = jwtService.generateToken(user);
        // Optional: Generate refresh token
        // var refreshToken = jwtService.generateRefreshToken(user);

        UserInfoResponse userInfo = UserInfoResponse.builder()
                .id(user.getId())
                .email(user.getEmail())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .roles(user.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                .build();

        return JwtAuthenticationResponse.builder()
                .accessToken(jwt)
                // .refreshToken(refreshToken) // Include if implemented
                .userInfo(userInfo)
                .build();
    }

    public JwtAuthenticationResponse login(LoginRequest request) {
        // This triggers the UserDetailsService and AuthenticationProvider
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(request.getEmail(), request.getPassword()));

        // If authentication is successful, authentication.getPrincipal() will be our User object
        User user = (User) authentication.getPrincipal();

        // Check if user exists (should be redundant after successful authentication, but good practice)
        // var user = userRepository.findByEmail(request.getEmail())
        //         .orElseThrow(() -> new IllegalArgumentException("Invalid email or password.")); // Should not happen if auth succeeds

        var jwt = jwtService.generateToken(user);
        // Optional: Generate refresh token
        // var refreshToken = jwtService.generateRefreshToken(user);

         UserInfoResponse userInfo = UserInfoResponse.builder()
                .id(user.getId())
                .email(user.getEmail())
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .roles(user.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))
                .build();

        return JwtAuthenticationResponse.builder()
                .accessToken(jwt)
                // .refreshToken(refreshToken) // Include if implemented
                .userInfo(userInfo)
                .build();
    }

    @Transactional // Add Transactional for signupAdmin
	public JwtAuthenticationResponse signupAdmin(SignUpRequest request) { // Changed return type
        log.warn("Attempting ADMIN signup for email: {}", request.getEmail()); // Log admin creation clearly
        if (userRepository.existsByEmail(request.getEmail())) {
            log.warn("Admin signup failed: Email {} already exists.", request.getEmail());
            throw new UserAlreadyExistsException("Email address already in use."); // Use specific exception
        }

        var user = User.builder()
                .firstName(request.getFirstName())
                .lastName(request.getLastName())
                .email(request.getEmail())
                .password(passwordEncoder.encode(request.getPassword()))
                .role(Role.ROLE_ADMIN) // Assign ADMIN role
                .build();

        user = userRepository.save(user); // Save the admin user
    
}