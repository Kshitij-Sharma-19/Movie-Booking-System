
package com.movie.booking.service;

import feign.FeignException;
import io.github.resilience4j.circuitbreaker.CallNotPermittedException;
import jakarta.persistence.OptimisticLockException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.movie.booking.client.MovieCatalogClient;
import com.movie.booking.client.PaymentClient;
import com.movie.booking.dto.BookingRequestDto;
import com.movie.booking.dto.BookingResponseDto;
import com.movie.booking.dto.PaymentRequestDto;
import com.movie.booking.dto.PaymentResponseDto;
import com.movie.booking.dto.ShowtimeDto;
import com.movie.booking.dto.ShowtimeSeatResponseDto; // NEW IMPORT
import com.movie.booking.exception.BookingException;
import com.movie.booking.exception.ResourceNotFoundException;
import com.movie.booking.model.Booking;
import com.movie.booking.model.BookingStatus;
import com.movie.booking.model.ShowtimeSeat;
import com.movie.booking.model.SeatStatus;
import com.movie.booking.repository.BookingRepository;
import com.movie.booking.repository.ShowtimeSeatRepository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Comparator; // NEW IMPORT

@Service
@RequiredArgsConstructor
@Slf4j
public class BookingService {

    private final BookingRepository bookingRepository;
    private final ShowtimeSeatRepository showtimeSeatRepository;
    private final MovieCatalogClient movieCatalogClient;
    private final PaymentClient paymentClient;

    private static final int SEAT_LOCK_DURATION_MINUTES = 10;
    private static final int DEFAULT_SEATS_PER_ROW = 10;

    // ... (initializeSeatsForShowtime and all other existing methods)
    // ... (convertToDto, createBooking, lockSeats, releaseSeats, etc.)

    public List<ShowtimeSeatResponseDto> getSeatsForShowtime(Long showtimeId) {
        log.debug("Fetching seat layout for showtimeId: {}", showtimeId);
        // First, ensure the showtime itself is valid (optional, but good practice)
        // getShowtimeDetails(showtimeId); // This would throw if showtime doesn't exist

        List<ShowtimeSeat> seats = showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, null); // Fetch all regardless of status
                                                                                                          // Or be more specific if needed
        if (seats.isEmpty()) {
            // Check if any seats exist at all for this showtime.
            // If not, it might mean they haven't been initialized.
            if (showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, SeatStatus.AVAILABLE).isEmpty() &&
                showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, SeatStatus.BOOKED).isEmpty() &&
                showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, SeatStatus.PENDING_PAYMENT).isEmpty() &&
                showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, SeatStatus.SELECTED_TEMP).isEmpty() &&
                showtimeSeatRepository.findAllByShowtimeIdAndStatus(showtimeId, SeatStatus.BLOCKED).isEmpty()) {
                log.warn("No seats found for showtimeId: {}. They might not have been initialized.", showtimeId);
                // Consider calling initializeSeatsForShowtime here if lazy init is desired,
                // but this requires totalSeats and seatsPerRow.
                // For now, just return empty or throw.
                return Collections.emptyList();
            }
        }
        
        // Custom comparator for seat identifiers like "A1", "A10", "B2"
        Comparator<ShowtimeSeat> seatComparator = Comparator
            .comparing((ShowtimeSeat seat) -> seat.getSeatIdentifier().substring(0, 1)) // Sort by row letter
            .thenComparingInt(seat -> Integer.parseInt(seat.getSeatIdentifier().substring(1))); // Then by seat number

        return seats.stream()
                .sorted(seatComparator) // Sort the seats
                .map(seat -> ShowtimeSeatResponseDto.builder()
                        .id(seat.getId())
                        .seatIdentifier(seat.getSeatIdentifier())
                        .status(seat.getStatus())
                        .userId(seat.getUserId()) // Will be null if seat is AVAILABLE
                        .build())
                .collect(Collectors.toList());
    }
    // --- PASTE ALL PREVIOUS BookingService methods below this line ---
    // (initializeSeatsForShowtime, convertToDto, createBooking, lockSeats, releaseSeats, updateSeatsForPendingPayment, confirmSeatsAsBooked,
    // getShowtimeDetails, validateShowtimeForBooking, processPayment, getBookingById, getBookingsByUserId,
    // cancelBooking, cleanupExpiredSeatLocks)

    @Transactional
    public void initializeSeatsForShowtime(Long showtimeId, int totalSeats, Integer seatsPerRowInput) {
        if (showtimeId == null || totalSeats <= 0) {
            log.error("Invalid input for seat initialization: showtimeId={}, totalSeats={}", showtimeId, totalSeats);
            throw new IllegalArgumentException("Showtime ID must be provided and total seats must be positive.");
        }
        
        long existingSeatsCount = showtimeSeatRepository.countByShowtimeId(showtimeId); // Simpler count

        if (existingSeatsCount > 0 && existingSeatsCount >= totalSeats) {
            log.info("Seats for showtimeId {} appear to be already initialized (found {} seats). Skipping generation.", showtimeId, existingSeatsCount);
            return;
        } else if (existingSeatsCount > 0) {
            log.warn("Seats for showtimeId {} are partially initialized (found {} seats, expected {}). " +
                     "This might indicate an issue. For this operation, we will assume it's safe to add missing seats or that this is a retry. " +
                     "A more robust solution might involve clearing existing seats first if a full re-initialization is intended.",
                     showtimeId, existingSeatsCount, totalSeats);
        }


        int effectiveSeatsPerRow = (seatsPerRowInput == null || seatsPerRowInput <= 0) ? DEFAULT_SEATS_PER_ROW : seatsPerRowInput;
        int numberOfRows = (int) Math.ceil((double) totalSeats / effectiveSeatsPerRow);

        log.info("Initializing up to {} seats for showtimeId: {}. Layout: {} rows, up to {} seats per row.",
                 totalSeats, showtimeId, numberOfRows, effectiveSeatsPerRow);

        List<ShowtimeSeat> seatsToCreate = new ArrayList<>();
        int seatsCreatedCount = 0;

        for (int i = 0; i < numberOfRows; i++) {
            char rowChar = (char) ('A' + i);
            if (rowChar > 'Z') {
                 log.warn("Seat generation for showtime {} trying to generate row beyond 'Z'. Current simple scheme only supports A-Z. Row index: {}", showtimeId, i);
                 // Decide: stop, or use a different naming like AA, AB. For now, we'll let it create non-standard chars.
            }

            for (int j = 1; j <= effectiveSeatsPerRow; j++) {
                if (seatsCreatedCount >= totalSeats) {
                    break; 
                }

                String seatIdentifier = String.format("%c%d", rowChar, j);

                // Idempotency: Check if this specific seat already exists
                if (showtimeSeatRepository.findByShowtimeIdAndSeatIdentifier(showtimeId, seatIdentifier).isPresent()) {
                   log.trace("Seat {} already exists for showtime {}. Skipping its creation.", seatIdentifier, showtimeId);
                   // We still need to count it towards the total if it exists, to ensure we create the *totalSeats* number eventually.
                   // However, if it exists, we don't add it to seatsToCreate.
                   // This logic is tricky if we only want to add *new* seats up to totalSeats.
                   // The initial countByShowtimeId check is more for "all or nothing" initialization.
                   // For now, let's assume if we are here, we are creating.
                   // A more robust "add missing seats" would be a different method.
                }


                ShowtimeSeat seat = ShowtimeSeat.builder()
                        .showtimeId(showtimeId)
                        .seatIdentifier(seatIdentifier)
                        .status(SeatStatus.AVAILABLE)
                        .version(0)
                        .build();
                seatsToCreate.add(seat);
                seatsCreatedCount++;
            }
            if (seatsCreatedCount >= totalSeats) {
                break;
            }
        }

        if (!seatsToCreate.isEmpty()) {
            showtimeSeatRepository.saveAll(seatsToCreate);
            log.info("Successfully created and saved {} new seat records for showtimeId: {}.", seatsToCreate.size(), showtimeId);
        } else if (existingSeatsCount == 0 && totalSeats > 0){ // Only warn if no seats existed and none were created despite request
             log.warn("No new seats were generated for showtimeId: {} (totalSeats requested: {}). Check generation logic and input.", showtimeId, totalSeats);
        } else if (existingSeatsCount > 0 && seatsToCreate.isEmpty()) {
            log.info("No *new* seats generated for showtimeId {}. Existing count: {}. Requested total: {}. Assumed already initialized.", showtimeId, existingSeatsCount, totalSeats);
        }
    }
    private BookingResponseDto convertToDto(Booking booking) {
        return BookingResponseDto.builder()
                .id(booking.getId())
                .userId(booking.getUserId())
                .showtimeId(booking.getShowtimeId())
                .movieId(booking.getMovieId())
                .theaterId(booking.getTheaterId())
                .numberOfSeats(booking.getNumberOfSeats())
                .selectedSeats(booking.getSelectedSeats())
                .totalPrice(booking.getTotalPrice())
                .bookingTime(booking.getBookingTime())
                .status(booking.getStatus())
                .paymentTransactionId(booking.getPaymentTransactionId())
                .movieTitle(booking.getMovieTitle())
                .theaterName(booking.getTheaterName())
                .showtimeDateTime(booking.getShowtimeDateTime())
                .build();
    }

    @Transactional
    public BookingResponseDto createBooking(BookingRequestDto request, String userId) {
        log.info("Attempting to create booking for user: {}, showtime: {}, seats: {}",
                 userId, request.getShowtimeId(), request.getSelectedSeats());

        ShowtimeDto showtimeDto = getShowtimeDetails(request.getShowtimeId());
        validateShowtimeForBooking(showtimeDto);

        List<ShowtimeSeat> lockedSeats = lockSeats(request.getShowtimeId(), request.getSelectedSeats(), userId);
        if (lockedSeats.size() != request.getSelectedSeats().size()) {
            releaseSeats(lockedSeats, "Partial lock failure during booking creation.");
            throw new BookingException("One or more selected seats are not available. Please try again.", null);
        }

        BigDecimal totalPrice = showtimeDto.getPrice().multiply(BigDecimal.valueOf(request.getSelectedSeats().size()));
        Booking booking = Booking.builder()
                .userId(userId)
                .showtimeId(request.getShowtimeId())
                .movieId(showtimeDto.getMovie().getId())
                .theaterId(showtimeDto.getTheater().getId())
                .selectedSeats(request.getSelectedSeats())
                .totalPrice(totalPrice)
                .bookingTime(LocalDateTime.now())
                .status(BookingStatus.PENDING_PAYMENT)
                .movieTitle(showtimeDto.getMovie().getTitle())
                .theaterName(showtimeDto.getTheater().getName())
                .showtimeDateTime(showtimeDto.getShowtime())
                .build();
        booking = bookingRepository.save(booking);
        log.info("Initial booking record created with id: {}, status: PENDING_PAYMENT", booking.getId());

        updateSeatsForPendingPayment(lockedSeats, booking.getId(), userId);

        PaymentResponseDto paymentResponse = processPayment(booking);

        if (paymentResponse.getStatus() == PaymentResponseDto.PaymentStatus.SUCCEEDED) {
            log.info("Payment successful for booking id: {}. Transaction ID: {}", booking.getId(), paymentResponse.getTransactionId());
            confirmSeatsAsBooked(lockedSeats, booking.getId());
            booking.setStatus(BookingStatus.CONFIRMED);
            booking.setPaymentTransactionId(paymentResponse.getTransactionId());
            log.info("Booking confirmed for id: {}", booking.getId());
        } else {
            log.warn("Payment failed for booking id: {}. Reason: {}", booking.getId(), paymentResponse.getMessage());
            releaseSeats(lockedSeats, "Payment failed.");
            booking.setStatus(BookingStatus.PAYMENT_FAILED);
        }

        Booking finalBooking = bookingRepository.save(booking);
        return convertToDto(finalBooking);
    }

    private List<ShowtimeSeat> lockSeats(Long showtimeId, List<String> seatIdentifiers, String userId) {
        List<ShowtimeSeat> successfullyLockedSeats = new ArrayList<>();
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);

        for (String seatId : seatIdentifiers) {
            try {
                ShowtimeSeat seat = showtimeSeatRepository.findByShowtimeIdAndSeatIdentifier(showtimeId, seatId)
                    .orElseThrow(() -> {
                        log.error("Seat {} not found for showtime {} during lock attempt.", seatId, showtimeId);
                        // Initialize seats if none are found for this showtime (basic lazy init attempt)
                        // This is a simplistic lazy init. A more robust one would get capacity from catalog.
                        // For now, we assume if a seat is requested, the layout *should* exist.
                        // if(showtimeSeatRepository.countByShowtimeId(showtimeId) == 0) {
                        //    log.warn("No seats found for showtime {}. Attempting lazy initialization with defaults.", showtimeId);
                        //    // This needs totalSeats, which we don't have here easily.
                        //    // initializeSeatsForShowtime(showtimeId, DEFAULT_TOTAL_SEATS_IF_UNKNOWN, DEFAULT_SEATS_PER_ROW);
                        //    // Then retry find:
                        //    // seat = showtimeSeatRepository.findByShowtimeIdAndSeatIdentifier(showtimeId, seatId)
                        //    //    .orElseThrow(() -> new BookingException("Seat " + seatId + " still not found after lazy init.", showtimeId));
                        // } else {
                           throw new BookingException("Seat " + seatId + " does not exist for this showtime.", showtimeId);
                        // }
                    });


                if (seat.getStatus() == SeatStatus.AVAILABLE) {
                    seat.setStatus(SeatStatus.SELECTED_TEMP);
                    seat.setUserId(userId);
                    seat.setLockedUntil(lockExpiryTime);
                    showtimeSeatRepository.save(seat); 
                    successfullyLockedSeats.add(seat);
                } else {
                    log.warn("Seat {} for showtime {} is not available for locking. Current status: {}", seatId, showtimeId, seat.getStatus());
                    throw new BookingException("Seat " + seatId + " is not available.", showtimeId);
                }
            } catch (OptimisticLockException ole) {
                log.warn("Optimistic lock failed for seat {} on showtime {}. Seat was modified concurrently.", seatId, showtimeId, ole);
                releaseSeats(successfullyLockedSeats, "Concurrent modification during seat locking for " + seatId);
                throw new BookingException("Failed to lock seat " + seatId + " due to a concurrent update. Please try again.", showtimeId);
            } catch (BookingException be) {
                log.warn("Booking exception while locking seat {}: {}", seatId, be.getMessage());
                releaseSeats(successfullyLockedSeats, "Booking exception during seat locking for " + seatId + ": " + be.getMessage());
                throw be;
            }
        }
        log.info("Successfully locked {} seats for showtime {} by user {}", successfullyLockedSeats.size(), showtimeId, userId);
        return successfullyLockedSeats;
    }

    private void updateSeatsForPendingPayment(List<ShowtimeSeat> seats, Long bookingId, String userId) {
        LocalDateTime lockExpiryTime = LocalDateTime.now().plusMinutes(SEAT_LOCK_DURATION_MINUTES);
        for (ShowtimeSeat seat : seats) {
            ShowtimeSeat freshSeat = showtimeSeatRepository.findById(seat.getId())
                .orElseThrow(() -> new BookingException("Seat with id " + seat.getId() + " not found during PENDING_PAYMENT update.", bookingId));

            if (freshSeat.getStatus() != SeatStatus.SELECTED_TEMP || !userId.equals(freshSeat.getUserId())) {
                 log.error("Seat {} for showtime {} was not in expected state (SELECTED_TEMP by user {}) for PENDING_PAYMENT update. Current status: {}, current user: {}",
                           freshSeat.getSeatIdentifier(), freshSeat.getShowtimeId(), userId, freshSeat.getStatus(), freshSeat.getUserId());
                throw new BookingException("Seat " + freshSeat.getSeatIdentifier() + " state changed unexpectedly before payment pending. Please retry booking.", bookingId);
            }

            freshSeat.setStatus(SeatStatus.PENDING_PAYMENT);
            freshSeat.setBookingId(bookingId);
            freshSeat.setLockedUntil(lockExpiryTime);
            showtimeSeatRepository.save(freshSeat);
        }
        log.info("Updated {} seats to PENDING_PAYMENT for bookingId {}", seats.size(), bookingId);
    }

    private void confirmSeatsAsBooked(List<ShowtimeSeat> seats, Long bookingId) {
        for (ShowtimeSeat seat : seats) {
             ShowtimeSeat freshSeat = showtimeSeatRepository.findById(seat.getId())
                .orElseThrow(() -> new BookingException("Seat with id " + seat.getId() + " not found during BOOKED confirmation.", bookingId));

            if (freshSeat.getStatus() != SeatStatus.PENDING_PAYMENT || !bookingId.equals(freshSeat.getBookingId())) {
                log.error("CRITICAL: Seat {} for showtime {} was not in PENDING_PAYMENT state for bookingId {} during confirmation. Current status: {}, current bookingId: {}. Payment might have been processed for an invalid state!",
                           freshSeat.getSeatIdentifier(), freshSeat.getShowtimeId(), bookingId, freshSeat.getStatus(), freshSeat.getBookingId());
                throw new BookingException("Seat " + freshSeat.getSeatIdentifier() + " state was inconsistent during booking confirmation. Please contact support.", bookingId);
            }

            freshSeat.setStatus(SeatStatus.BOOKED);
            freshSeat.setLockedUntil(null);
            showtimeSeatRepository.save(freshSeat);
        }
        log.info("Confirmed {} seats as BOOKED for bookingId {}", seats.size(), bookingId);
    }

    private void releaseSeats(List<ShowtimeSeat> seatsToRelease, String reason) {
        if (seatsToRelease == null || seatsToRelease.isEmpty()) {
            return;
        }
        log.warn("Attempting to release {} seats. Reason: {}", seatsToRelease.size(), reason);
        for (ShowtimeSeat seatAttemptRelease : seatsToRelease) {
            if (seatAttemptRelease.getId() == null) {
                log.warn("Skipping release for a seat without an ID (likely not persisted yet or detached): {}", seatAttemptRelease);
                continue;
            }
            showtimeSeatRepository.findById(seatAttemptRelease.getId()).ifPresent(currentSeat -> {
                if (currentSeat.getStatus() == SeatStatus.SELECTED_TEMP || currentSeat.getStatus() == SeatStatus.PENDING_PAYMENT) {
                    log.info("Releasing seat: id={}, identifier={}, showtimeId={}, oldStatus={}, userId={}",
                             currentSeat.getId(), currentSeat.getSeatIdentifier(), currentSeat.getShowtimeId(), currentSeat.getStatus(), currentSeat.getUserId());
                    currentSeat.setStatus(SeatStatus.AVAILABLE);
                    currentSeat.setUserId(null);
                    currentSeat.setBookingId(null);
                    currentSeat.setLockedUntil(null);
                    showtimeSeatRepository.save(currentSeat);
                } else {
                    log.warn("Seat id={}, identifier={}, showtimeId={} was not in expected state ({}/{}) for release. Current status: {}. Not releasing.",
                             currentSeat.getId(), currentSeat.getSeatIdentifier(), currentSeat.getShowtimeId(),
                             SeatStatus.SELECTED_TEMP, SeatStatus.PENDING_PAYMENT, currentSeat.getStatus());
                }
            });
        }
    }

    private ShowtimeDto getShowtimeDetails(Long showtimeId) {
        log.debug("Fetching showtime details for id: {}", showtimeId);
        try {
            ResponseEntity<ShowtimeDto> response = movieCatalogClient.getShowtimeById(showtimeId);
            if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                log.error("Failed to fetch showtime details for id: {}. Status: {}", showtimeId, response.getStatusCode());
                // Attempt to initialize seats if not found and it's a 404, then re-throw or handle.
                // This is complex as initializeSeatsForShowtime needs capacity.
                // For now, we assume getShowtimeById is only for existing showtimes.
                throw new BookingException("Could not retrieve showtime details.", null);
            }
            ShowtimeDto dto = response.getBody();
            if (dto.getMovie() == null || dto.getTheater() == null) {
                 log.error("Incomplete showtime details received for id: {}", showtimeId);
                 throw new BookingException("Incomplete showtime details received from catalog service.", null);
            }
            // LAZY SEAT INITIALIZATION (Example - if ShowtimeDto has capacity)
            // This is one place you *could* trigger seat initialization.
            // if (showtimeSeatRepository.countByShowtimeId(showtimeId) == 0 &&
            //     dto.getTheater() != null && dto.getTheater().getCapacity() != null && dto.getTheater().getCapacity() > 0) {
            //     log.info("Lazily initializing seats for showtime {} as they were not found.", showtimeId);
            //     initializeSeatsForShowtime(showtimeId, dto.getTheater().getCapacity(), dto.getTheater().getSeatsPerRow());
            // }

            log.debug("Successfully fetched showtime details for id: {}", showtimeId);
            return dto;
        } catch (MovieCatalogClient.ServiceUnavailableException | CallNotPermittedException e) {
             log.error("Error fetching showtime details for id: {} due to service availability/circuit breaker", showtimeId, e);
            throw new BookingException("Movie Catalog Service is currently unavailable. Please try again later.", null);
        } catch (FeignException e) {
             log.error("Feign error fetching showtime details for id: {}", showtimeId, e);
             if (e.status() == 404) { // Showtime not found in catalog
                 throw new ResourceNotFoundException("Showtime", "id", showtimeId);
             }
             throw new BookingException("Error communicating with Movie Catalog Service.", null);
        } catch (Exception e) {
             log.error("Unexpected error fetching showtime details for id: {}", showtimeId, e);
             throw new BookingException("An unexpected error occurred while fetching showtime details.", null);
        }
    }

    private void validateShowtimeForBooking(ShowtimeDto showtimeDto) {
         if (showtimeDto.getShowtime().isBefore(LocalDateTime.now())) {
            log.warn("Attempted booking for past showtime id: {}", showtimeDto.getId());
            throw new BookingException("Cannot book for a showtime that has already passed.", showtimeDto.getId());
        }
    }

     private PaymentResponseDto processPayment(Booking booking) {
        log.info("Initiating payment process for booking id: {}", booking.getId());
        PaymentRequestDto paymentRequest = PaymentRequestDto.builder()
                .bookingId(booking.getId())
                .userId(booking.getUserId())
                .amount(booking.getTotalPrice())
                .currency("INR")
                .paymentMethodNonce("fake-nonce")
                .build();
        try {
             ResponseEntity<PaymentResponseDto> response = paymentClient.processPayment(paymentRequest);
             if (!response.getStatusCode().is2xxSuccessful() || response.getBody() == null) {
                  log.error("Payment processing failed for booking id: {}. Status: {}", booking.getId(), response.getStatusCode());
                   return PaymentResponseDto.builder()
                            .bookingId(booking.getId())
                            .status(PaymentResponseDto.PaymentStatus.FAILED)
                            .message("Payment processing failed with status: " + response.getStatusCode())
                            .build();
             }
             log.info("Payment response received for booking id: {}. Status: {}", booking.getId(), response.getBody().getStatus());
             return response.getBody();
        } catch (PaymentClient.PaymentFallback.ServiceUnavailableException | CallNotPermittedException e) {
             log.error("Payment processing failed for booking id: {} due to service availability/circuit breaker", booking.getId(), e);
              return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("Payment service unavailable. Please try again later.")
                        .build();
        } catch (FeignException e) {
            log.error("Feign error during payment processing for booking id: {}", booking.getId(), e);
             return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("Error communicating with Payment Service.")
                        .build();
        } catch (Exception e) {
             log.error("Unexpected error during payment processing for booking id: {}", booking.getId(), e);
              return PaymentResponseDto.builder()
                        .bookingId(booking.getId())
                        .status(PaymentResponseDto.PaymentStatus.FAILED)
                        .message("An unexpected error occurred during payment.")
                        .build();
        }
    }

    public BookingResponseDto getBookingById(Long id, String userId) {
        log.info("Fetching booking by id: {} for user: {}", id, userId);
        Booking booking = bookingRepository.findByIdAndUserId(id, userId)
                .orElseThrow(() -> new ResourceNotFoundException("Booking", "id/userId", id + "/" + userId));
        return convertToDto(booking);
    }

    public List<BookingResponseDto> getBookingsByUserId(String userId) {
        log.info("Fetching all bookings for user: {}", userId);
        List<Booking> bookings = bookingRepository.findByUserIdOrderByBookingTimeDesc(userId);
        return bookings.stream()
                .map(this::convertToDto)
                .collect(Collectors.toList());
    }

    @Transactional
    public BookingResponseDto cancelBooking(Long bookingId, String userId) {
         log.warn("Attempting cancellation for booking id: {} by user: {}", bookingId, userId);
         Booking booking = bookingRepository.findByIdAndUserId(bookingId, userId)
                 .orElseThrow(() -> new ResourceNotFoundException("Booking", "id/userId", bookingId + "/" + userId));

        if (booking.getStatus() != BookingStatus.CONFIRMED) {
            throw new BookingException("Booking cannot be cancelled as it is not confirmed.", bookingId);
        }
        if (booking.getShowtimeDateTime() != null && booking.getShowtimeDateTime().isBefore(LocalDateTime.now().plusHours(2))) {
             throw new BookingException("Booking cannot be cancelled this close to the showtime.", bookingId);
        }

        log.info("Initiating refund for booking id: {}", bookingId);
        boolean refundSuccessful = true; 

        if (refundSuccessful) {
            List<ShowtimeSeat> seatsToRelease = showtimeSeatRepository.findAllByBookingId(bookingId);
            releaseSeats(seatsToRelease, "Booking cancellation for bookingId: " + bookingId);

            booking.setStatus(BookingStatus.CANCELLED);
            log.info("Booking id: {} cancelled successfully.", bookingId);
        } else {
             log.error("Refund failed for booking id: {}", bookingId);
             throw new BookingException("Cancellation failed: Could not process refund.", bookingId);
        }

         Booking updatedBooking = bookingRepository.save(booking);
         return convertToDto(updatedBooking);
    }

    @Transactional
    public void cleanupExpiredSeatLocks() {
        LocalDateTime cutoffTime = LocalDateTime.now().minusMinutes(SEAT_LOCK_DURATION_MINUTES + 1);

        List<ShowtimeSeat> expiredTempSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.SELECTED_TEMP, cutoffTime);
        if (!expiredTempSeats.isEmpty()) {
            log.info("Found {} expired SELECTED_TEMP seats to clean up.", expiredTempSeats.size());
            releaseSeats(expiredTempSeats, "Expired SELECTED_TEMP lock cleanup.");
        }

        List<ShowtimeSeat> expiredPendingSeats = showtimeSeatRepository.findAllByStatusAndLockedUntilBefore(SeatStatus.PENDING_PAYMENT, cutoffTime);
        for (ShowtimeSeat seat : expiredPendingSeats) {
            log.warn("Seat {} (id:{}) for showtime {} was in PENDING_PAYMENT and expired. Releasing seat.",
                     seat.getSeatIdentifier(), seat.getId(), seat.getShowtimeId());
            if (seat.getBookingId() != null) {
                bookingRepository.findById(seat.getBookingId()).ifPresent(booking -> {
                    if (booking.getStatus() == BookingStatus.PENDING_PAYMENT) {
                        log.warn("Updating booking {} to PAYMENT_FAILED due to expired seat lock for seat id {}",
                                 booking.getId(), seat.getId());
                        booking.setStatus(BookingStatus.PAYMENT_FAILED);
                        bookingRepository.save(booking);
                    }
                });
            }
        }
        if(!expiredPendingSeats.isEmpty()){
             releaseSeats(expiredPendingSeats, "Expired PENDING_PAYMENT lock cleanup.");
        }
    }

}